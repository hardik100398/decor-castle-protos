// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: order_book.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "decorcastle";

/** Order status enum */
export enum OrderStatus {
  RECEIVED = 0,
  CONFIRMED = 1,
  PROCESSING = 2,
  CUTTING = 3,
  FABRICATING = 4,
  QUALITY_CHECK = 5,
  READY_FOR_DISPATCH = 6,
  DISPATCHED = 7,
  IN_TRANSIT = 8,
  DELIVERED = 9,
  PARTIALLY_DELIVERED = 10,
  COMPLETED = 11,
  INVOICED = 12,
  ON_HOLD = 13,
  CANCELLED = 14,
  RETURNED = 15,
  REFUNDED = 16,
  UNRECOGNIZED = -1,
}

export function orderStatusFromJSON(object: any): OrderStatus {
  switch (object) {
    case 0:
    case "RECEIVED":
      return OrderStatus.RECEIVED;
    case 1:
    case "CONFIRMED":
      return OrderStatus.CONFIRMED;
    case 2:
    case "PROCESSING":
      return OrderStatus.PROCESSING;
    case 3:
    case "CUTTING":
      return OrderStatus.CUTTING;
    case 4:
    case "FABRICATING":
      return OrderStatus.FABRICATING;
    case 5:
    case "QUALITY_CHECK":
      return OrderStatus.QUALITY_CHECK;
    case 6:
    case "READY_FOR_DISPATCH":
      return OrderStatus.READY_FOR_DISPATCH;
    case 7:
    case "DISPATCHED":
      return OrderStatus.DISPATCHED;
    case 8:
    case "IN_TRANSIT":
      return OrderStatus.IN_TRANSIT;
    case 9:
    case "DELIVERED":
      return OrderStatus.DELIVERED;
    case 10:
    case "PARTIALLY_DELIVERED":
      return OrderStatus.PARTIALLY_DELIVERED;
    case 11:
    case "COMPLETED":
      return OrderStatus.COMPLETED;
    case 12:
    case "INVOICED":
      return OrderStatus.INVOICED;
    case 13:
    case "ON_HOLD":
      return OrderStatus.ON_HOLD;
    case 14:
    case "CANCELLED":
      return OrderStatus.CANCELLED;
    case 15:
    case "RETURNED":
      return OrderStatus.RETURNED;
    case 16:
    case "REFUNDED":
      return OrderStatus.REFUNDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderStatus.UNRECOGNIZED;
  }
}

export function orderStatusToJSON(object: OrderStatus): string {
  switch (object) {
    case OrderStatus.RECEIVED:
      return "RECEIVED";
    case OrderStatus.CONFIRMED:
      return "CONFIRMED";
    case OrderStatus.PROCESSING:
      return "PROCESSING";
    case OrderStatus.CUTTING:
      return "CUTTING";
    case OrderStatus.FABRICATING:
      return "FABRICATING";
    case OrderStatus.QUALITY_CHECK:
      return "QUALITY_CHECK";
    case OrderStatus.READY_FOR_DISPATCH:
      return "READY_FOR_DISPATCH";
    case OrderStatus.DISPATCHED:
      return "DISPATCHED";
    case OrderStatus.IN_TRANSIT:
      return "IN_TRANSIT";
    case OrderStatus.DELIVERED:
      return "DELIVERED";
    case OrderStatus.PARTIALLY_DELIVERED:
      return "PARTIALLY_DELIVERED";
    case OrderStatus.COMPLETED:
      return "COMPLETED";
    case OrderStatus.INVOICED:
      return "INVOICED";
    case OrderStatus.ON_HOLD:
      return "ON_HOLD";
    case OrderStatus.CANCELLED:
      return "CANCELLED";
    case OrderStatus.RETURNED:
      return "RETURNED";
    case OrderStatus.REFUNDED:
      return "REFUNDED";
    case OrderStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Order Book message */
export interface OrderBook {
  id: number;
  orderNumber: string;
  customerOrderNumber?: string | undefined;
  customerName: string;
  customerContact?: string | undefined;
  customerEmail?: string | undefined;
  customerAddress?: string | undefined;
  deliveryAddress?: string | undefined;
  deliveryContact?: string | undefined;
  deliveryDate?: string | undefined;
  productDescription: string;
  productType?: string | undefined;
  specifications?: string | undefined;
  quantity: number;
  unit: string;
  unitPrice?: number | undefined;
  totalAmount?: number | undefined;
  status: OrderStatus;
  priority: string;
  orderDate: string;
  expectedCompletionDate?: string | undefined;
  actualCompletionDate?: string | undefined;
  dispatchDate?: string | undefined;
  notes?: string | undefined;
  specialInstructions?: string | undefined;
  tallyVoucherNumber?: string | undefined;
  isBilledInTally: boolean;
  tallyBillDate?: string | undefined;
  stockId?: number | undefined;
  creditorId?: number | undefined;
  createdAt: string;
  updatedAt: string;
}

/** Create Order Book Request */
export interface CreateOrderBookRequest {
  orderNumber: string;
  customerOrderNumber?: string | undefined;
  customerName: string;
  customerContact?: string | undefined;
  customerEmail?: string | undefined;
  customerAddress?: string | undefined;
  deliveryAddress?: string | undefined;
  deliveryContact?: string | undefined;
  deliveryDate?: string | undefined;
  productDescription: string;
  productType?: string | undefined;
  specifications?: string | undefined;
  quantity: number;
  unit: string;
  unitPrice?: number | undefined;
  totalAmount?: number | undefined;
  priority: string;
  expectedCompletionDate?: string | undefined;
  notes?: string | undefined;
  specialInstructions?: string | undefined;
  stockId?: number | undefined;
  creditorId?: number | undefined;
}

/** Update Order Book Request */
export interface UpdateOrderBookRequest {
  orderNumber?: string | undefined;
  customerOrderNumber?: string | undefined;
  customerName?: string | undefined;
  customerContact?: string | undefined;
  customerEmail?: string | undefined;
  customerAddress?: string | undefined;
  deliveryAddress?: string | undefined;
  deliveryContact?: string | undefined;
  deliveryDate?: string | undefined;
  productDescription?: string | undefined;
  productType?: string | undefined;
  specifications?: string | undefined;
  quantity?: number | undefined;
  unit?: string | undefined;
  unitPrice?: number | undefined;
  totalAmount?: number | undefined;
  status?: OrderStatus | undefined;
  priority?: string | undefined;
  expectedCompletionDate?: string | undefined;
  actualCompletionDate?: string | undefined;
  dispatchDate?: string | undefined;
  notes?: string | undefined;
  specialInstructions?: string | undefined;
  tallyVoucherNumber?: string | undefined;
  isBilledInTally?: boolean | undefined;
  tallyBillDate?: string | undefined;
  stockId?: number | undefined;
  creditorId?: number | undefined;
}

/** Order Status Update Request */
export interface OrderStatusUpdateRequest {
  status: OrderStatus;
  notes?: string | undefined;
  actualCompletionDate?: string | undefined;
  dispatchDate?: string | undefined;
  deliveryDate?: string | undefined;
}

/** Order Book Summary */
export interface OrderBookSummary {
  totalOrders: number;
  ordersByStatus: { [key: string]: number };
  ordersByPriority: { [key: string]: number };
  overdueOrders: number;
  completedOrders: number;
  pendingOrders: number;
  totalValue: number;
}

export interface OrderBookSummary_OrdersByStatusEntry {
  key: string;
  value: number;
}

export interface OrderBookSummary_OrdersByPriorityEntry {
  key: string;
  value: number;
}

function createBaseOrderBook(): OrderBook {
  return {
    id: 0,
    orderNumber: "",
    customerOrderNumber: undefined,
    customerName: "",
    customerContact: undefined,
    customerEmail: undefined,
    customerAddress: undefined,
    deliveryAddress: undefined,
    deliveryContact: undefined,
    deliveryDate: undefined,
    productDescription: "",
    productType: undefined,
    specifications: undefined,
    quantity: 0,
    unit: "",
    unitPrice: undefined,
    totalAmount: undefined,
    status: 0,
    priority: "",
    orderDate: "",
    expectedCompletionDate: undefined,
    actualCompletionDate: undefined,
    dispatchDate: undefined,
    notes: undefined,
    specialInstructions: undefined,
    tallyVoucherNumber: undefined,
    isBilledInTally: false,
    tallyBillDate: undefined,
    stockId: undefined,
    creditorId: undefined,
    createdAt: "",
    updatedAt: "",
  };
}

export const OrderBook = {
  encode(message: OrderBook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.orderNumber !== "") {
      writer.uint32(18).string(message.orderNumber);
    }
    if (message.customerOrderNumber !== undefined) {
      writer.uint32(26).string(message.customerOrderNumber);
    }
    if (message.customerName !== "") {
      writer.uint32(34).string(message.customerName);
    }
    if (message.customerContact !== undefined) {
      writer.uint32(42).string(message.customerContact);
    }
    if (message.customerEmail !== undefined) {
      writer.uint32(50).string(message.customerEmail);
    }
    if (message.customerAddress !== undefined) {
      writer.uint32(58).string(message.customerAddress);
    }
    if (message.deliveryAddress !== undefined) {
      writer.uint32(66).string(message.deliveryAddress);
    }
    if (message.deliveryContact !== undefined) {
      writer.uint32(74).string(message.deliveryContact);
    }
    if (message.deliveryDate !== undefined) {
      writer.uint32(82).string(message.deliveryDate);
    }
    if (message.productDescription !== "") {
      writer.uint32(90).string(message.productDescription);
    }
    if (message.productType !== undefined) {
      writer.uint32(98).string(message.productType);
    }
    if (message.specifications !== undefined) {
      writer.uint32(106).string(message.specifications);
    }
    if (message.quantity !== 0) {
      writer.uint32(112).int32(message.quantity);
    }
    if (message.unit !== "") {
      writer.uint32(122).string(message.unit);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(133).float(message.unitPrice);
    }
    if (message.totalAmount !== undefined) {
      writer.uint32(141).float(message.totalAmount);
    }
    if (message.status !== 0) {
      writer.uint32(144).int32(message.status);
    }
    if (message.priority !== "") {
      writer.uint32(154).string(message.priority);
    }
    if (message.orderDate !== "") {
      writer.uint32(162).string(message.orderDate);
    }
    if (message.expectedCompletionDate !== undefined) {
      writer.uint32(170).string(message.expectedCompletionDate);
    }
    if (message.actualCompletionDate !== undefined) {
      writer.uint32(178).string(message.actualCompletionDate);
    }
    if (message.dispatchDate !== undefined) {
      writer.uint32(186).string(message.dispatchDate);
    }
    if (message.notes !== undefined) {
      writer.uint32(202).string(message.notes);
    }
    if (message.specialInstructions !== undefined) {
      writer.uint32(210).string(message.specialInstructions);
    }
    if (message.tallyVoucherNumber !== undefined) {
      writer.uint32(218).string(message.tallyVoucherNumber);
    }
    if (message.isBilledInTally !== false) {
      writer.uint32(224).bool(message.isBilledInTally);
    }
    if (message.tallyBillDate !== undefined) {
      writer.uint32(234).string(message.tallyBillDate);
    }
    if (message.stockId !== undefined) {
      writer.uint32(240).int32(message.stockId);
    }
    if (message.creditorId !== undefined) {
      writer.uint32(248).int32(message.creditorId);
    }
    if (message.createdAt !== "") {
      writer.uint32(258).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(266).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderBook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderBook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerOrderNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.customerName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.customerContact = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customerEmail = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.customerAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deliveryAddress = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deliveryContact = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.deliveryDate = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.productDescription = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.productType = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.specifications = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.unit = reader.string();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 17:
          if (tag !== 141) {
            break;
          }

          message.totalAmount = reader.float();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.priority = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.orderDate = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.expectedCompletionDate = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.actualCompletionDate = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.dispatchDate = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.notes = reader.string();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.specialInstructions = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.tallyVoucherNumber = reader.string();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.isBilledInTally = reader.bool();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.tallyBillDate = reader.string();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.stockId = reader.int32();
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.creditorId = reader.int32();
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderBook {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : "",
      customerOrderNumber: isSet(object.customerOrderNumber)
        ? globalThis.String(object.customerOrderNumber)
        : undefined,
      customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : "",
      customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
      customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
      customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
      deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
      deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
      deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
      productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : "",
      productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
      specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
      status: isSet(object.status) ? orderStatusFromJSON(object.status) : 0,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
      orderDate: isSet(object.orderDate) ? globalThis.String(object.orderDate) : "",
      expectedCompletionDate: isSet(object.expectedCompletionDate)
        ? globalThis.String(object.expectedCompletionDate)
        : undefined,
      actualCompletionDate: isSet(object.actualCompletionDate)
        ? globalThis.String(object.actualCompletionDate)
        : undefined,
      dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
      specialInstructions: isSet(object.specialInstructions)
        ? globalThis.String(object.specialInstructions)
        : undefined,
      tallyVoucherNumber: isSet(object.tallyVoucherNumber) ? globalThis.String(object.tallyVoucherNumber) : undefined,
      isBilledInTally: isSet(object.isBilledInTally) ? globalThis.Boolean(object.isBilledInTally) : false,
      tallyBillDate: isSet(object.tallyBillDate) ? globalThis.String(object.tallyBillDate) : undefined,
      stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
      creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: OrderBook): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.orderNumber !== "") {
      obj.orderNumber = message.orderNumber;
    }
    if (message.customerOrderNumber !== undefined) {
      obj.customerOrderNumber = message.customerOrderNumber;
    }
    if (message.customerName !== "") {
      obj.customerName = message.customerName;
    }
    if (message.customerContact !== undefined) {
      obj.customerContact = message.customerContact;
    }
    if (message.customerEmail !== undefined) {
      obj.customerEmail = message.customerEmail;
    }
    if (message.customerAddress !== undefined) {
      obj.customerAddress = message.customerAddress;
    }
    if (message.deliveryAddress !== undefined) {
      obj.deliveryAddress = message.deliveryAddress;
    }
    if (message.deliveryContact !== undefined) {
      obj.deliveryContact = message.deliveryContact;
    }
    if (message.deliveryDate !== undefined) {
      obj.deliveryDate = message.deliveryDate;
    }
    if (message.productDescription !== "") {
      obj.productDescription = message.productDescription;
    }
    if (message.productType !== undefined) {
      obj.productType = message.productType;
    }
    if (message.specifications !== undefined) {
      obj.specifications = message.specifications;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.totalAmount !== undefined) {
      obj.totalAmount = message.totalAmount;
    }
    if (message.status !== 0) {
      obj.status = orderStatusToJSON(message.status);
    }
    if (message.priority !== "") {
      obj.priority = message.priority;
    }
    if (message.orderDate !== "") {
      obj.orderDate = message.orderDate;
    }
    if (message.expectedCompletionDate !== undefined) {
      obj.expectedCompletionDate = message.expectedCompletionDate;
    }
    if (message.actualCompletionDate !== undefined) {
      obj.actualCompletionDate = message.actualCompletionDate;
    }
    if (message.dispatchDate !== undefined) {
      obj.dispatchDate = message.dispatchDate;
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    if (message.specialInstructions !== undefined) {
      obj.specialInstructions = message.specialInstructions;
    }
    if (message.tallyVoucherNumber !== undefined) {
      obj.tallyVoucherNumber = message.tallyVoucherNumber;
    }
    if (message.isBilledInTally !== false) {
      obj.isBilledInTally = message.isBilledInTally;
    }
    if (message.tallyBillDate !== undefined) {
      obj.tallyBillDate = message.tallyBillDate;
    }
    if (message.stockId !== undefined) {
      obj.stockId = Math.round(message.stockId);
    }
    if (message.creditorId !== undefined) {
      obj.creditorId = Math.round(message.creditorId);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderBook>, I>>(base?: I): OrderBook {
    return OrderBook.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderBook>, I>>(object: I): OrderBook {
    const message = createBaseOrderBook();
    message.id = object.id ?? 0;
    message.orderNumber = object.orderNumber ?? "";
    message.customerOrderNumber = object.customerOrderNumber ?? undefined;
    message.customerName = object.customerName ?? "";
    message.customerContact = object.customerContact ?? undefined;
    message.customerEmail = object.customerEmail ?? undefined;
    message.customerAddress = object.customerAddress ?? undefined;
    message.deliveryAddress = object.deliveryAddress ?? undefined;
    message.deliveryContact = object.deliveryContact ?? undefined;
    message.deliveryDate = object.deliveryDate ?? undefined;
    message.productDescription = object.productDescription ?? "";
    message.productType = object.productType ?? undefined;
    message.specifications = object.specifications ?? undefined;
    message.quantity = object.quantity ?? 0;
    message.unit = object.unit ?? "";
    message.unitPrice = object.unitPrice ?? undefined;
    message.totalAmount = object.totalAmount ?? undefined;
    message.status = object.status ?? 0;
    message.priority = object.priority ?? "";
    message.orderDate = object.orderDate ?? "";
    message.expectedCompletionDate = object.expectedCompletionDate ?? undefined;
    message.actualCompletionDate = object.actualCompletionDate ?? undefined;
    message.dispatchDate = object.dispatchDate ?? undefined;
    message.notes = object.notes ?? undefined;
    message.specialInstructions = object.specialInstructions ?? undefined;
    message.tallyVoucherNumber = object.tallyVoucherNumber ?? undefined;
    message.isBilledInTally = object.isBilledInTally ?? false;
    message.tallyBillDate = object.tallyBillDate ?? undefined;
    message.stockId = object.stockId ?? undefined;
    message.creditorId = object.creditorId ?? undefined;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseCreateOrderBookRequest(): CreateOrderBookRequest {
  return {
    orderNumber: "",
    customerOrderNumber: undefined,
    customerName: "",
    customerContact: undefined,
    customerEmail: undefined,
    customerAddress: undefined,
    deliveryAddress: undefined,
    deliveryContact: undefined,
    deliveryDate: undefined,
    productDescription: "",
    productType: undefined,
    specifications: undefined,
    quantity: 0,
    unit: "",
    unitPrice: undefined,
    totalAmount: undefined,
    priority: "",
    expectedCompletionDate: undefined,
    notes: undefined,
    specialInstructions: undefined,
    stockId: undefined,
    creditorId: undefined,
  };
}

export const CreateOrderBookRequest = {
  encode(message: CreateOrderBookRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orderNumber !== "") {
      writer.uint32(10).string(message.orderNumber);
    }
    if (message.customerOrderNumber !== undefined) {
      writer.uint32(18).string(message.customerOrderNumber);
    }
    if (message.customerName !== "") {
      writer.uint32(26).string(message.customerName);
    }
    if (message.customerContact !== undefined) {
      writer.uint32(34).string(message.customerContact);
    }
    if (message.customerEmail !== undefined) {
      writer.uint32(42).string(message.customerEmail);
    }
    if (message.customerAddress !== undefined) {
      writer.uint32(50).string(message.customerAddress);
    }
    if (message.deliveryAddress !== undefined) {
      writer.uint32(58).string(message.deliveryAddress);
    }
    if (message.deliveryContact !== undefined) {
      writer.uint32(66).string(message.deliveryContact);
    }
    if (message.deliveryDate !== undefined) {
      writer.uint32(74).string(message.deliveryDate);
    }
    if (message.productDescription !== "") {
      writer.uint32(82).string(message.productDescription);
    }
    if (message.productType !== undefined) {
      writer.uint32(90).string(message.productType);
    }
    if (message.specifications !== undefined) {
      writer.uint32(98).string(message.specifications);
    }
    if (message.quantity !== 0) {
      writer.uint32(104).int32(message.quantity);
    }
    if (message.unit !== "") {
      writer.uint32(114).string(message.unit);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(125).float(message.unitPrice);
    }
    if (message.totalAmount !== undefined) {
      writer.uint32(133).float(message.totalAmount);
    }
    if (message.priority !== "") {
      writer.uint32(138).string(message.priority);
    }
    if (message.expectedCompletionDate !== undefined) {
      writer.uint32(146).string(message.expectedCompletionDate);
    }
    if (message.notes !== undefined) {
      writer.uint32(154).string(message.notes);
    }
    if (message.specialInstructions !== undefined) {
      writer.uint32(162).string(message.specialInstructions);
    }
    if (message.stockId !== undefined) {
      writer.uint32(168).int32(message.stockId);
    }
    if (message.creditorId !== undefined) {
      writer.uint32(176).int32(message.creditorId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderBookRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orderNumber = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customerOrderNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.customerContact = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.customerEmail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customerAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deliveryAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deliveryContact = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deliveryDate = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.productDescription = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.productType = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.specifications = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.unit = reader.string();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }

          message.totalAmount = reader.float();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.priority = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.expectedCompletionDate = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.notes = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.specialInstructions = reader.string();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.stockId = reader.int32();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.creditorId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderBookRequest {
    return {
      orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : "",
      customerOrderNumber: isSet(object.customerOrderNumber)
        ? globalThis.String(object.customerOrderNumber)
        : undefined,
      customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : "",
      customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
      customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
      customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
      deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
      deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
      deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
      productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : "",
      productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
      specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
      expectedCompletionDate: isSet(object.expectedCompletionDate)
        ? globalThis.String(object.expectedCompletionDate)
        : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
      specialInstructions: isSet(object.specialInstructions)
        ? globalThis.String(object.specialInstructions)
        : undefined,
      stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
      creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
    };
  },

  toJSON(message: CreateOrderBookRequest): unknown {
    const obj: any = {};
    if (message.orderNumber !== "") {
      obj.orderNumber = message.orderNumber;
    }
    if (message.customerOrderNumber !== undefined) {
      obj.customerOrderNumber = message.customerOrderNumber;
    }
    if (message.customerName !== "") {
      obj.customerName = message.customerName;
    }
    if (message.customerContact !== undefined) {
      obj.customerContact = message.customerContact;
    }
    if (message.customerEmail !== undefined) {
      obj.customerEmail = message.customerEmail;
    }
    if (message.customerAddress !== undefined) {
      obj.customerAddress = message.customerAddress;
    }
    if (message.deliveryAddress !== undefined) {
      obj.deliveryAddress = message.deliveryAddress;
    }
    if (message.deliveryContact !== undefined) {
      obj.deliveryContact = message.deliveryContact;
    }
    if (message.deliveryDate !== undefined) {
      obj.deliveryDate = message.deliveryDate;
    }
    if (message.productDescription !== "") {
      obj.productDescription = message.productDescription;
    }
    if (message.productType !== undefined) {
      obj.productType = message.productType;
    }
    if (message.specifications !== undefined) {
      obj.specifications = message.specifications;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.unit !== "") {
      obj.unit = message.unit;
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.totalAmount !== undefined) {
      obj.totalAmount = message.totalAmount;
    }
    if (message.priority !== "") {
      obj.priority = message.priority;
    }
    if (message.expectedCompletionDate !== undefined) {
      obj.expectedCompletionDate = message.expectedCompletionDate;
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    if (message.specialInstructions !== undefined) {
      obj.specialInstructions = message.specialInstructions;
    }
    if (message.stockId !== undefined) {
      obj.stockId = Math.round(message.stockId);
    }
    if (message.creditorId !== undefined) {
      obj.creditorId = Math.round(message.creditorId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderBookRequest>, I>>(base?: I): CreateOrderBookRequest {
    return CreateOrderBookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderBookRequest>, I>>(object: I): CreateOrderBookRequest {
    const message = createBaseCreateOrderBookRequest();
    message.orderNumber = object.orderNumber ?? "";
    message.customerOrderNumber = object.customerOrderNumber ?? undefined;
    message.customerName = object.customerName ?? "";
    message.customerContact = object.customerContact ?? undefined;
    message.customerEmail = object.customerEmail ?? undefined;
    message.customerAddress = object.customerAddress ?? undefined;
    message.deliveryAddress = object.deliveryAddress ?? undefined;
    message.deliveryContact = object.deliveryContact ?? undefined;
    message.deliveryDate = object.deliveryDate ?? undefined;
    message.productDescription = object.productDescription ?? "";
    message.productType = object.productType ?? undefined;
    message.specifications = object.specifications ?? undefined;
    message.quantity = object.quantity ?? 0;
    message.unit = object.unit ?? "";
    message.unitPrice = object.unitPrice ?? undefined;
    message.totalAmount = object.totalAmount ?? undefined;
    message.priority = object.priority ?? "";
    message.expectedCompletionDate = object.expectedCompletionDate ?? undefined;
    message.notes = object.notes ?? undefined;
    message.specialInstructions = object.specialInstructions ?? undefined;
    message.stockId = object.stockId ?? undefined;
    message.creditorId = object.creditorId ?? undefined;
    return message;
  },
};

function createBaseUpdateOrderBookRequest(): UpdateOrderBookRequest {
  return {
    orderNumber: undefined,
    customerOrderNumber: undefined,
    customerName: undefined,
    customerContact: undefined,
    customerEmail: undefined,
    customerAddress: undefined,
    deliveryAddress: undefined,
    deliveryContact: undefined,
    deliveryDate: undefined,
    productDescription: undefined,
    productType: undefined,
    specifications: undefined,
    quantity: undefined,
    unit: undefined,
    unitPrice: undefined,
    totalAmount: undefined,
    status: undefined,
    priority: undefined,
    expectedCompletionDate: undefined,
    actualCompletionDate: undefined,
    dispatchDate: undefined,
    notes: undefined,
    specialInstructions: undefined,
    tallyVoucherNumber: undefined,
    isBilledInTally: undefined,
    tallyBillDate: undefined,
    stockId: undefined,
    creditorId: undefined,
  };
}

export const UpdateOrderBookRequest = {
  encode(message: UpdateOrderBookRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.orderNumber !== undefined) {
      writer.uint32(10).string(message.orderNumber);
    }
    if (message.customerOrderNumber !== undefined) {
      writer.uint32(18).string(message.customerOrderNumber);
    }
    if (message.customerName !== undefined) {
      writer.uint32(26).string(message.customerName);
    }
    if (message.customerContact !== undefined) {
      writer.uint32(34).string(message.customerContact);
    }
    if (message.customerEmail !== undefined) {
      writer.uint32(42).string(message.customerEmail);
    }
    if (message.customerAddress !== undefined) {
      writer.uint32(50).string(message.customerAddress);
    }
    if (message.deliveryAddress !== undefined) {
      writer.uint32(58).string(message.deliveryAddress);
    }
    if (message.deliveryContact !== undefined) {
      writer.uint32(66).string(message.deliveryContact);
    }
    if (message.deliveryDate !== undefined) {
      writer.uint32(74).string(message.deliveryDate);
    }
    if (message.productDescription !== undefined) {
      writer.uint32(82).string(message.productDescription);
    }
    if (message.productType !== undefined) {
      writer.uint32(90).string(message.productType);
    }
    if (message.specifications !== undefined) {
      writer.uint32(98).string(message.specifications);
    }
    if (message.quantity !== undefined) {
      writer.uint32(104).int32(message.quantity);
    }
    if (message.unit !== undefined) {
      writer.uint32(114).string(message.unit);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(125).float(message.unitPrice);
    }
    if (message.totalAmount !== undefined) {
      writer.uint32(133).float(message.totalAmount);
    }
    if (message.status !== undefined) {
      writer.uint32(136).int32(message.status);
    }
    if (message.priority !== undefined) {
      writer.uint32(146).string(message.priority);
    }
    if (message.expectedCompletionDate !== undefined) {
      writer.uint32(154).string(message.expectedCompletionDate);
    }
    if (message.actualCompletionDate !== undefined) {
      writer.uint32(162).string(message.actualCompletionDate);
    }
    if (message.dispatchDate !== undefined) {
      writer.uint32(170).string(message.dispatchDate);
    }
    if (message.notes !== undefined) {
      writer.uint32(178).string(message.notes);
    }
    if (message.specialInstructions !== undefined) {
      writer.uint32(186).string(message.specialInstructions);
    }
    if (message.tallyVoucherNumber !== undefined) {
      writer.uint32(194).string(message.tallyVoucherNumber);
    }
    if (message.isBilledInTally !== undefined) {
      writer.uint32(200).bool(message.isBilledInTally);
    }
    if (message.tallyBillDate !== undefined) {
      writer.uint32(210).string(message.tallyBillDate);
    }
    if (message.stockId !== undefined) {
      writer.uint32(216).int32(message.stockId);
    }
    if (message.creditorId !== undefined) {
      writer.uint32(224).int32(message.creditorId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrderBookRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orderNumber = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customerOrderNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customerName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.customerContact = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.customerEmail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customerAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deliveryAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.deliveryContact = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deliveryDate = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.productDescription = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.productType = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.specifications = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.unit = reader.string();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 16:
          if (tag !== 133) {
            break;
          }

          message.totalAmount = reader.float();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.priority = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.expectedCompletionDate = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.actualCompletionDate = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.dispatchDate = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.notes = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.specialInstructions = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.tallyVoucherNumber = reader.string();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.isBilledInTally = reader.bool();
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.tallyBillDate = reader.string();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.stockId = reader.int32();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.creditorId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderBookRequest {
    return {
      orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : undefined,
      customerOrderNumber: isSet(object.customerOrderNumber)
        ? globalThis.String(object.customerOrderNumber)
        : undefined,
      customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : undefined,
      customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
      customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
      customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
      deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
      deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
      deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
      productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : undefined,
      productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
      specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : undefined,
      unit: isSet(object.unit) ? globalThis.String(object.unit) : undefined,
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
      status: isSet(object.status) ? orderStatusFromJSON(object.status) : undefined,
      priority: isSet(object.priority) ? globalThis.String(object.priority) : undefined,
      expectedCompletionDate: isSet(object.expectedCompletionDate)
        ? globalThis.String(object.expectedCompletionDate)
        : undefined,
      actualCompletionDate: isSet(object.actualCompletionDate)
        ? globalThis.String(object.actualCompletionDate)
        : undefined,
      dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
      specialInstructions: isSet(object.specialInstructions)
        ? globalThis.String(object.specialInstructions)
        : undefined,
      tallyVoucherNumber: isSet(object.tallyVoucherNumber) ? globalThis.String(object.tallyVoucherNumber) : undefined,
      isBilledInTally: isSet(object.isBilledInTally) ? globalThis.Boolean(object.isBilledInTally) : undefined,
      tallyBillDate: isSet(object.tallyBillDate) ? globalThis.String(object.tallyBillDate) : undefined,
      stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
      creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
    };
  },

  toJSON(message: UpdateOrderBookRequest): unknown {
    const obj: any = {};
    if (message.orderNumber !== undefined) {
      obj.orderNumber = message.orderNumber;
    }
    if (message.customerOrderNumber !== undefined) {
      obj.customerOrderNumber = message.customerOrderNumber;
    }
    if (message.customerName !== undefined) {
      obj.customerName = message.customerName;
    }
    if (message.customerContact !== undefined) {
      obj.customerContact = message.customerContact;
    }
    if (message.customerEmail !== undefined) {
      obj.customerEmail = message.customerEmail;
    }
    if (message.customerAddress !== undefined) {
      obj.customerAddress = message.customerAddress;
    }
    if (message.deliveryAddress !== undefined) {
      obj.deliveryAddress = message.deliveryAddress;
    }
    if (message.deliveryContact !== undefined) {
      obj.deliveryContact = message.deliveryContact;
    }
    if (message.deliveryDate !== undefined) {
      obj.deliveryDate = message.deliveryDate;
    }
    if (message.productDescription !== undefined) {
      obj.productDescription = message.productDescription;
    }
    if (message.productType !== undefined) {
      obj.productType = message.productType;
    }
    if (message.specifications !== undefined) {
      obj.specifications = message.specifications;
    }
    if (message.quantity !== undefined) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.unit !== undefined) {
      obj.unit = message.unit;
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.totalAmount !== undefined) {
      obj.totalAmount = message.totalAmount;
    }
    if (message.status !== undefined) {
      obj.status = orderStatusToJSON(message.status);
    }
    if (message.priority !== undefined) {
      obj.priority = message.priority;
    }
    if (message.expectedCompletionDate !== undefined) {
      obj.expectedCompletionDate = message.expectedCompletionDate;
    }
    if (message.actualCompletionDate !== undefined) {
      obj.actualCompletionDate = message.actualCompletionDate;
    }
    if (message.dispatchDate !== undefined) {
      obj.dispatchDate = message.dispatchDate;
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    if (message.specialInstructions !== undefined) {
      obj.specialInstructions = message.specialInstructions;
    }
    if (message.tallyVoucherNumber !== undefined) {
      obj.tallyVoucherNumber = message.tallyVoucherNumber;
    }
    if (message.isBilledInTally !== undefined) {
      obj.isBilledInTally = message.isBilledInTally;
    }
    if (message.tallyBillDate !== undefined) {
      obj.tallyBillDate = message.tallyBillDate;
    }
    if (message.stockId !== undefined) {
      obj.stockId = Math.round(message.stockId);
    }
    if (message.creditorId !== undefined) {
      obj.creditorId = Math.round(message.creditorId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderBookRequest>, I>>(base?: I): UpdateOrderBookRequest {
    return UpdateOrderBookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderBookRequest>, I>>(object: I): UpdateOrderBookRequest {
    const message = createBaseUpdateOrderBookRequest();
    message.orderNumber = object.orderNumber ?? undefined;
    message.customerOrderNumber = object.customerOrderNumber ?? undefined;
    message.customerName = object.customerName ?? undefined;
    message.customerContact = object.customerContact ?? undefined;
    message.customerEmail = object.customerEmail ?? undefined;
    message.customerAddress = object.customerAddress ?? undefined;
    message.deliveryAddress = object.deliveryAddress ?? undefined;
    message.deliveryContact = object.deliveryContact ?? undefined;
    message.deliveryDate = object.deliveryDate ?? undefined;
    message.productDescription = object.productDescription ?? undefined;
    message.productType = object.productType ?? undefined;
    message.specifications = object.specifications ?? undefined;
    message.quantity = object.quantity ?? undefined;
    message.unit = object.unit ?? undefined;
    message.unitPrice = object.unitPrice ?? undefined;
    message.totalAmount = object.totalAmount ?? undefined;
    message.status = object.status ?? undefined;
    message.priority = object.priority ?? undefined;
    message.expectedCompletionDate = object.expectedCompletionDate ?? undefined;
    message.actualCompletionDate = object.actualCompletionDate ?? undefined;
    message.dispatchDate = object.dispatchDate ?? undefined;
    message.notes = object.notes ?? undefined;
    message.specialInstructions = object.specialInstructions ?? undefined;
    message.tallyVoucherNumber = object.tallyVoucherNumber ?? undefined;
    message.isBilledInTally = object.isBilledInTally ?? undefined;
    message.tallyBillDate = object.tallyBillDate ?? undefined;
    message.stockId = object.stockId ?? undefined;
    message.creditorId = object.creditorId ?? undefined;
    return message;
  },
};

function createBaseOrderStatusUpdateRequest(): OrderStatusUpdateRequest {
  return {
    status: 0,
    notes: undefined,
    actualCompletionDate: undefined,
    dispatchDate: undefined,
    deliveryDate: undefined,
  };
}

export const OrderStatusUpdateRequest = {
  encode(message: OrderStatusUpdateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.notes !== undefined) {
      writer.uint32(18).string(message.notes);
    }
    if (message.actualCompletionDate !== undefined) {
      writer.uint32(26).string(message.actualCompletionDate);
    }
    if (message.dispatchDate !== undefined) {
      writer.uint32(34).string(message.dispatchDate);
    }
    if (message.deliveryDate !== undefined) {
      writer.uint32(42).string(message.deliveryDate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderStatusUpdateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderStatusUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notes = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actualCompletionDate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dispatchDate = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deliveryDate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderStatusUpdateRequest {
    return {
      status: isSet(object.status) ? orderStatusFromJSON(object.status) : 0,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
      actualCompletionDate: isSet(object.actualCompletionDate)
        ? globalThis.String(object.actualCompletionDate)
        : undefined,
      dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
      deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
    };
  },

  toJSON(message: OrderStatusUpdateRequest): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = orderStatusToJSON(message.status);
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    if (message.actualCompletionDate !== undefined) {
      obj.actualCompletionDate = message.actualCompletionDate;
    }
    if (message.dispatchDate !== undefined) {
      obj.dispatchDate = message.dispatchDate;
    }
    if (message.deliveryDate !== undefined) {
      obj.deliveryDate = message.deliveryDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderStatusUpdateRequest>, I>>(base?: I): OrderStatusUpdateRequest {
    return OrderStatusUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderStatusUpdateRequest>, I>>(object: I): OrderStatusUpdateRequest {
    const message = createBaseOrderStatusUpdateRequest();
    message.status = object.status ?? 0;
    message.notes = object.notes ?? undefined;
    message.actualCompletionDate = object.actualCompletionDate ?? undefined;
    message.dispatchDate = object.dispatchDate ?? undefined;
    message.deliveryDate = object.deliveryDate ?? undefined;
    return message;
  },
};

function createBaseOrderBookSummary(): OrderBookSummary {
  return {
    totalOrders: 0,
    ordersByStatus: {},
    ordersByPriority: {},
    overdueOrders: 0,
    completedOrders: 0,
    pendingOrders: 0,
    totalValue: 0,
  };
}

export const OrderBookSummary = {
  encode(message: OrderBookSummary, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.totalOrders !== 0) {
      writer.uint32(8).int32(message.totalOrders);
    }
    Object.entries(message.ordersByStatus).forEach(([key, value]) => {
      OrderBookSummary_OrdersByStatusEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    Object.entries(message.ordersByPriority).forEach(([key, value]) => {
      OrderBookSummary_OrdersByPriorityEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    if (message.overdueOrders !== 0) {
      writer.uint32(32).int32(message.overdueOrders);
    }
    if (message.completedOrders !== 0) {
      writer.uint32(40).int32(message.completedOrders);
    }
    if (message.pendingOrders !== 0) {
      writer.uint32(48).int32(message.pendingOrders);
    }
    if (message.totalValue !== 0) {
      writer.uint32(61).float(message.totalValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderBookSummary {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderBookSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.totalOrders = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = OrderBookSummary_OrdersByStatusEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.ordersByStatus[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = OrderBookSummary_OrdersByPriorityEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.ordersByPriority[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.overdueOrders = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.completedOrders = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pendingOrders = reader.int32();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.totalValue = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderBookSummary {
    return {
      totalOrders: isSet(object.totalOrders) ? globalThis.Number(object.totalOrders) : 0,
      ordersByStatus: isObject(object.ordersByStatus)
        ? Object.entries(object.ordersByStatus).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      ordersByPriority: isObject(object.ordersByPriority)
        ? Object.entries(object.ordersByPriority).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      overdueOrders: isSet(object.overdueOrders) ? globalThis.Number(object.overdueOrders) : 0,
      completedOrders: isSet(object.completedOrders) ? globalThis.Number(object.completedOrders) : 0,
      pendingOrders: isSet(object.pendingOrders) ? globalThis.Number(object.pendingOrders) : 0,
      totalValue: isSet(object.totalValue) ? globalThis.Number(object.totalValue) : 0,
    };
  },

  toJSON(message: OrderBookSummary): unknown {
    const obj: any = {};
    if (message.totalOrders !== 0) {
      obj.totalOrders = Math.round(message.totalOrders);
    }
    if (message.ordersByStatus) {
      const entries = Object.entries(message.ordersByStatus);
      if (entries.length > 0) {
        obj.ordersByStatus = {};
        entries.forEach(([k, v]) => {
          obj.ordersByStatus[k] = Math.round(v);
        });
      }
    }
    if (message.ordersByPriority) {
      const entries = Object.entries(message.ordersByPriority);
      if (entries.length > 0) {
        obj.ordersByPriority = {};
        entries.forEach(([k, v]) => {
          obj.ordersByPriority[k] = Math.round(v);
        });
      }
    }
    if (message.overdueOrders !== 0) {
      obj.overdueOrders = Math.round(message.overdueOrders);
    }
    if (message.completedOrders !== 0) {
      obj.completedOrders = Math.round(message.completedOrders);
    }
    if (message.pendingOrders !== 0) {
      obj.pendingOrders = Math.round(message.pendingOrders);
    }
    if (message.totalValue !== 0) {
      obj.totalValue = message.totalValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderBookSummary>, I>>(base?: I): OrderBookSummary {
    return OrderBookSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderBookSummary>, I>>(object: I): OrderBookSummary {
    const message = createBaseOrderBookSummary();
    message.totalOrders = object.totalOrders ?? 0;
    message.ordersByStatus = Object.entries(object.ordersByStatus ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.ordersByPriority = Object.entries(object.ordersByPriority ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.overdueOrders = object.overdueOrders ?? 0;
    message.completedOrders = object.completedOrders ?? 0;
    message.pendingOrders = object.pendingOrders ?? 0;
    message.totalValue = object.totalValue ?? 0;
    return message;
  },
};

function createBaseOrderBookSummary_OrdersByStatusEntry(): OrderBookSummary_OrdersByStatusEntry {
  return { key: "", value: 0 };
}

export const OrderBookSummary_OrdersByStatusEntry = {
  encode(message: OrderBookSummary_OrdersByStatusEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderBookSummary_OrdersByStatusEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderBookSummary_OrdersByStatusEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderBookSummary_OrdersByStatusEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: OrderBookSummary_OrdersByStatusEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderBookSummary_OrdersByStatusEntry>, I>>(
    base?: I,
  ): OrderBookSummary_OrdersByStatusEntry {
    return OrderBookSummary_OrdersByStatusEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderBookSummary_OrdersByStatusEntry>, I>>(
    object: I,
  ): OrderBookSummary_OrdersByStatusEntry {
    const message = createBaseOrderBookSummary_OrdersByStatusEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseOrderBookSummary_OrdersByPriorityEntry(): OrderBookSummary_OrdersByPriorityEntry {
  return { key: "", value: 0 };
}

export const OrderBookSummary_OrdersByPriorityEntry = {
  encode(message: OrderBookSummary_OrdersByPriorityEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderBookSummary_OrdersByPriorityEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderBookSummary_OrdersByPriorityEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderBookSummary_OrdersByPriorityEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: OrderBookSummary_OrdersByPriorityEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderBookSummary_OrdersByPriorityEntry>, I>>(
    base?: I,
  ): OrderBookSummary_OrdersByPriorityEntry {
    return OrderBookSummary_OrdersByPriorityEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderBookSummary_OrdersByPriorityEntry>, I>>(
    object: I,
  ): OrderBookSummary_OrdersByPriorityEntry {
    const message = createBaseOrderBookSummary_OrdersByPriorityEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
