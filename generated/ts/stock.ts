// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: stock.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "decorcastle";

export interface Stock {
  id: number;
  productTypeId: number;
  productName?: string | undefined;
  productNumber: string;
  /** deprecated, use company_id instead */
  company?: string | undefined;
  companyId: number;
  thickness?: string | undefined;
  width?: string | undefined;
  height?: string | undefined;
  amountPresent: number;
  unitPrice?: number | undefined;
  createdAt: string;
  updatedAt: string;
  lastOrderedAt?:
    | string
    | undefined;
  /** Adhesive-specific fields */
  weight?:
    | number
    | undefined;
  /** Pack size description (e.g., '500ml', '1kg') */
  packSize?:
    | string
    | undefined;
  /** Hardware-specific fields */
  color?:
    | string
    | undefined;
  /** Alloy type (e.g., 'Stainless Steel', 'Aluminum') */
  alloyType?:
    | string
    | undefined;
  /** Specific hardware category (e.g., 'wardrobe', 'kitchen', 'general') */
  hardwareCategory?: string | undefined;
}

export interface CreateStockRequest {
  productTypeId: number;
  productName?: string | undefined;
  productNumber: string;
  /** deprecated, use company_id instead */
  company?: string | undefined;
  companyId: number;
  thickness?: string | undefined;
  width?: string | undefined;
  height?: string | undefined;
  amountPresent: number;
  unitPrice?:
    | number
    | undefined;
  /** Adhesive-specific fields */
  weight?:
    | number
    | undefined;
  /** Pack size description (e.g., '500ml', '1kg') */
  packSize?:
    | string
    | undefined;
  /** Hardware-specific fields */
  color?:
    | string
    | undefined;
  /** Alloy type (e.g., 'Stainless Steel', 'Aluminum') */
  alloyType?:
    | string
    | undefined;
  /** Specific hardware category (e.g., 'wardrobe', 'kitchen', 'general') */
  hardwareCategory?: string | undefined;
}

export interface BatchCreateStockRequest {
  items: CreateStockRequest[];
}

export interface UpdateStockRequest {
  productTypeId?: number | undefined;
  productName?: string | undefined;
  productNumber?:
    | string
    | undefined;
  /** deprecated, use company_id instead */
  company?: string | undefined;
  companyId?: number | undefined;
  thickness?: string | undefined;
  width?: string | undefined;
  height?: string | undefined;
  amountPresent?: number | undefined;
  unitPrice?:
    | number
    | undefined;
  /** Adhesive-specific fields */
  weight?:
    | number
    | undefined;
  /** Pack size description (e.g., '500ml', '1kg') */
  packSize?:
    | string
    | undefined;
  /** Hardware-specific fields */
  color?:
    | string
    | undefined;
  /** Alloy type (e.g., 'Stainless Steel', 'Aluminum') */
  alloyType?:
    | string
    | undefined;
  /** Specific hardware category (e.g., 'wardrobe', 'kitchen', 'general') */
  hardwareCategory?: string | undefined;
}

function createBaseStock(): Stock {
  return {
    id: 0,
    productTypeId: 0,
    productName: undefined,
    productNumber: "",
    company: undefined,
    companyId: 0,
    thickness: undefined,
    width: undefined,
    height: undefined,
    amountPresent: 0,
    unitPrice: undefined,
    createdAt: "",
    updatedAt: "",
    lastOrderedAt: undefined,
    weight: undefined,
    packSize: undefined,
    color: undefined,
    alloyType: undefined,
    hardwareCategory: undefined,
  };
}

export const Stock = {
  encode(message: Stock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.productTypeId !== 0) {
      writer.uint32(16).int32(message.productTypeId);
    }
    if (message.productName !== undefined) {
      writer.uint32(26).string(message.productName);
    }
    if (message.productNumber !== "") {
      writer.uint32(34).string(message.productNumber);
    }
    if (message.company !== undefined) {
      writer.uint32(42).string(message.company);
    }
    if (message.companyId !== 0) {
      writer.uint32(112).int32(message.companyId);
    }
    if (message.thickness !== undefined) {
      writer.uint32(50).string(message.thickness);
    }
    if (message.width !== undefined) {
      writer.uint32(58).string(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(66).string(message.height);
    }
    if (message.amountPresent !== 0) {
      writer.uint32(72).int32(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(85).float(message.unitPrice);
    }
    if (message.createdAt !== "") {
      writer.uint32(90).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(98).string(message.updatedAt);
    }
    if (message.lastOrderedAt !== undefined) {
      writer.uint32(106).string(message.lastOrderedAt);
    }
    if (message.weight !== undefined) {
      writer.uint32(125).float(message.weight);
    }
    if (message.packSize !== undefined) {
      writer.uint32(130).string(message.packSize);
    }
    if (message.color !== undefined) {
      writer.uint32(138).string(message.color);
    }
    if (message.alloyType !== undefined) {
      writer.uint32(146).string(message.alloyType);
    }
    if (message.hardwareCategory !== undefined) {
      writer.uint32(154).string(message.hardwareCategory);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stock {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.productTypeId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.productName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.productNumber = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.company = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.thickness = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.width = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.height = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.amountPresent = reader.int32();
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.lastOrderedAt = reader.string();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.weight = reader.float();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.packSize = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.color = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.alloyType = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.hardwareCategory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stock {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : 0,
      productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
      productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : "",
      company: isSet(object.company) ? globalThis.String(object.company) : undefined,
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
      width: isSet(object.width) ? globalThis.String(object.width) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : undefined,
      amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : 0,
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      lastOrderedAt: isSet(object.lastOrderedAt) ? globalThis.String(object.lastOrderedAt) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      packSize: isSet(object.packSize) ? globalThis.String(object.packSize) : undefined,
      color: isSet(object.color) ? globalThis.String(object.color) : undefined,
      alloyType: isSet(object.alloyType) ? globalThis.String(object.alloyType) : undefined,
      hardwareCategory: isSet(object.hardwareCategory) ? globalThis.String(object.hardwareCategory) : undefined,
    };
  },

  toJSON(message: Stock): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.productTypeId !== 0) {
      obj.productTypeId = Math.round(message.productTypeId);
    }
    if (message.productName !== undefined) {
      obj.productName = message.productName;
    }
    if (message.productNumber !== "") {
      obj.productNumber = message.productNumber;
    }
    if (message.company !== undefined) {
      obj.company = message.company;
    }
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.thickness !== undefined) {
      obj.thickness = message.thickness;
    }
    if (message.width !== undefined) {
      obj.width = message.width;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.amountPresent !== 0) {
      obj.amountPresent = Math.round(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.lastOrderedAt !== undefined) {
      obj.lastOrderedAt = message.lastOrderedAt;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.packSize !== undefined) {
      obj.packSize = message.packSize;
    }
    if (message.color !== undefined) {
      obj.color = message.color;
    }
    if (message.alloyType !== undefined) {
      obj.alloyType = message.alloyType;
    }
    if (message.hardwareCategory !== undefined) {
      obj.hardwareCategory = message.hardwareCategory;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stock>, I>>(base?: I): Stock {
    return Stock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stock>, I>>(object: I): Stock {
    const message = createBaseStock();
    message.id = object.id ?? 0;
    message.productTypeId = object.productTypeId ?? 0;
    message.productName = object.productName ?? undefined;
    message.productNumber = object.productNumber ?? "";
    message.company = object.company ?? undefined;
    message.companyId = object.companyId ?? 0;
    message.thickness = object.thickness ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.amountPresent = object.amountPresent ?? 0;
    message.unitPrice = object.unitPrice ?? undefined;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.lastOrderedAt = object.lastOrderedAt ?? undefined;
    message.weight = object.weight ?? undefined;
    message.packSize = object.packSize ?? undefined;
    message.color = object.color ?? undefined;
    message.alloyType = object.alloyType ?? undefined;
    message.hardwareCategory = object.hardwareCategory ?? undefined;
    return message;
  },
};

function createBaseCreateStockRequest(): CreateStockRequest {
  return {
    productTypeId: 0,
    productName: undefined,
    productNumber: "",
    company: undefined,
    companyId: 0,
    thickness: undefined,
    width: undefined,
    height: undefined,
    amountPresent: 0,
    unitPrice: undefined,
    weight: undefined,
    packSize: undefined,
    color: undefined,
    alloyType: undefined,
    hardwareCategory: undefined,
  };
}

export const CreateStockRequest = {
  encode(message: CreateStockRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productTypeId !== 0) {
      writer.uint32(8).int32(message.productTypeId);
    }
    if (message.productName !== undefined) {
      writer.uint32(18).string(message.productName);
    }
    if (message.productNumber !== "") {
      writer.uint32(26).string(message.productNumber);
    }
    if (message.company !== undefined) {
      writer.uint32(34).string(message.company);
    }
    if (message.companyId !== 0) {
      writer.uint32(80).int32(message.companyId);
    }
    if (message.thickness !== undefined) {
      writer.uint32(42).string(message.thickness);
    }
    if (message.width !== undefined) {
      writer.uint32(50).string(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(58).string(message.height);
    }
    if (message.amountPresent !== 0) {
      writer.uint32(64).int32(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(77).float(message.unitPrice);
    }
    if (message.weight !== undefined) {
      writer.uint32(93).float(message.weight);
    }
    if (message.packSize !== undefined) {
      writer.uint32(98).string(message.packSize);
    }
    if (message.color !== undefined) {
      writer.uint32(106).string(message.color);
    }
    if (message.alloyType !== undefined) {
      writer.uint32(114).string(message.alloyType);
    }
    if (message.hardwareCategory !== undefined) {
      writer.uint32(122).string(message.hardwareCategory);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateStockRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.productTypeId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.productName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.productNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.company = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.thickness = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.amountPresent = reader.int32();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.weight = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.packSize = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.color = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.alloyType = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.hardwareCategory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStockRequest {
    return {
      productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : 0,
      productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
      productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : "",
      company: isSet(object.company) ? globalThis.String(object.company) : undefined,
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : 0,
      thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
      width: isSet(object.width) ? globalThis.String(object.width) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : undefined,
      amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : 0,
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      packSize: isSet(object.packSize) ? globalThis.String(object.packSize) : undefined,
      color: isSet(object.color) ? globalThis.String(object.color) : undefined,
      alloyType: isSet(object.alloyType) ? globalThis.String(object.alloyType) : undefined,
      hardwareCategory: isSet(object.hardwareCategory) ? globalThis.String(object.hardwareCategory) : undefined,
    };
  },

  toJSON(message: CreateStockRequest): unknown {
    const obj: any = {};
    if (message.productTypeId !== 0) {
      obj.productTypeId = Math.round(message.productTypeId);
    }
    if (message.productName !== undefined) {
      obj.productName = message.productName;
    }
    if (message.productNumber !== "") {
      obj.productNumber = message.productNumber;
    }
    if (message.company !== undefined) {
      obj.company = message.company;
    }
    if (message.companyId !== 0) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.thickness !== undefined) {
      obj.thickness = message.thickness;
    }
    if (message.width !== undefined) {
      obj.width = message.width;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.amountPresent !== 0) {
      obj.amountPresent = Math.round(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.packSize !== undefined) {
      obj.packSize = message.packSize;
    }
    if (message.color !== undefined) {
      obj.color = message.color;
    }
    if (message.alloyType !== undefined) {
      obj.alloyType = message.alloyType;
    }
    if (message.hardwareCategory !== undefined) {
      obj.hardwareCategory = message.hardwareCategory;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateStockRequest>, I>>(base?: I): CreateStockRequest {
    return CreateStockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateStockRequest>, I>>(object: I): CreateStockRequest {
    const message = createBaseCreateStockRequest();
    message.productTypeId = object.productTypeId ?? 0;
    message.productName = object.productName ?? undefined;
    message.productNumber = object.productNumber ?? "";
    message.company = object.company ?? undefined;
    message.companyId = object.companyId ?? 0;
    message.thickness = object.thickness ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.amountPresent = object.amountPresent ?? 0;
    message.unitPrice = object.unitPrice ?? undefined;
    message.weight = object.weight ?? undefined;
    message.packSize = object.packSize ?? undefined;
    message.color = object.color ?? undefined;
    message.alloyType = object.alloyType ?? undefined;
    message.hardwareCategory = object.hardwareCategory ?? undefined;
    return message;
  },
};

function createBaseBatchCreateStockRequest(): BatchCreateStockRequest {
  return { items: [] };
}

export const BatchCreateStockRequest = {
  encode(message: BatchCreateStockRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.items) {
      CreateStockRequest.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCreateStockRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateStockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.items.push(CreateStockRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateStockRequest {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => CreateStockRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateStockRequest): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => CreateStockRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchCreateStockRequest>, I>>(base?: I): BatchCreateStockRequest {
    return BatchCreateStockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchCreateStockRequest>, I>>(object: I): BatchCreateStockRequest {
    const message = createBaseBatchCreateStockRequest();
    message.items = object.items?.map((e) => CreateStockRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateStockRequest(): UpdateStockRequest {
  return {
    productTypeId: undefined,
    productName: undefined,
    productNumber: undefined,
    company: undefined,
    companyId: undefined,
    thickness: undefined,
    width: undefined,
    height: undefined,
    amountPresent: undefined,
    unitPrice: undefined,
    weight: undefined,
    packSize: undefined,
    color: undefined,
    alloyType: undefined,
    hardwareCategory: undefined,
  };
}

export const UpdateStockRequest = {
  encode(message: UpdateStockRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productTypeId !== undefined) {
      writer.uint32(8).int32(message.productTypeId);
    }
    if (message.productName !== undefined) {
      writer.uint32(18).string(message.productName);
    }
    if (message.productNumber !== undefined) {
      writer.uint32(26).string(message.productNumber);
    }
    if (message.company !== undefined) {
      writer.uint32(34).string(message.company);
    }
    if (message.companyId !== undefined) {
      writer.uint32(80).int32(message.companyId);
    }
    if (message.thickness !== undefined) {
      writer.uint32(42).string(message.thickness);
    }
    if (message.width !== undefined) {
      writer.uint32(50).string(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(58).string(message.height);
    }
    if (message.amountPresent !== undefined) {
      writer.uint32(64).int32(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      writer.uint32(77).float(message.unitPrice);
    }
    if (message.weight !== undefined) {
      writer.uint32(93).float(message.weight);
    }
    if (message.packSize !== undefined) {
      writer.uint32(98).string(message.packSize);
    }
    if (message.color !== undefined) {
      writer.uint32(106).string(message.color);
    }
    if (message.alloyType !== undefined) {
      writer.uint32(114).string(message.alloyType);
    }
    if (message.hardwareCategory !== undefined) {
      writer.uint32(122).string(message.hardwareCategory);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStockRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.productTypeId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.productName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.productNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.company = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.companyId = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.thickness = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.width = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.height = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.amountPresent = reader.int32();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.unitPrice = reader.float();
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.weight = reader.float();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.packSize = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.color = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.alloyType = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.hardwareCategory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStockRequest {
    return {
      productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : undefined,
      productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
      productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : undefined,
      company: isSet(object.company) ? globalThis.String(object.company) : undefined,
      companyId: isSet(object.companyId) ? globalThis.Number(object.companyId) : undefined,
      thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
      width: isSet(object.width) ? globalThis.String(object.width) : undefined,
      height: isSet(object.height) ? globalThis.String(object.height) : undefined,
      amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : undefined,
      unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      packSize: isSet(object.packSize) ? globalThis.String(object.packSize) : undefined,
      color: isSet(object.color) ? globalThis.String(object.color) : undefined,
      alloyType: isSet(object.alloyType) ? globalThis.String(object.alloyType) : undefined,
      hardwareCategory: isSet(object.hardwareCategory) ? globalThis.String(object.hardwareCategory) : undefined,
    };
  },

  toJSON(message: UpdateStockRequest): unknown {
    const obj: any = {};
    if (message.productTypeId !== undefined) {
      obj.productTypeId = Math.round(message.productTypeId);
    }
    if (message.productName !== undefined) {
      obj.productName = message.productName;
    }
    if (message.productNumber !== undefined) {
      obj.productNumber = message.productNumber;
    }
    if (message.company !== undefined) {
      obj.company = message.company;
    }
    if (message.companyId !== undefined) {
      obj.companyId = Math.round(message.companyId);
    }
    if (message.thickness !== undefined) {
      obj.thickness = message.thickness;
    }
    if (message.width !== undefined) {
      obj.width = message.width;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.amountPresent !== undefined) {
      obj.amountPresent = Math.round(message.amountPresent);
    }
    if (message.unitPrice !== undefined) {
      obj.unitPrice = message.unitPrice;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.packSize !== undefined) {
      obj.packSize = message.packSize;
    }
    if (message.color !== undefined) {
      obj.color = message.color;
    }
    if (message.alloyType !== undefined) {
      obj.alloyType = message.alloyType;
    }
    if (message.hardwareCategory !== undefined) {
      obj.hardwareCategory = message.hardwareCategory;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStockRequest>, I>>(base?: I): UpdateStockRequest {
    return UpdateStockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStockRequest>, I>>(object: I): UpdateStockRequest {
    const message = createBaseUpdateStockRequest();
    message.productTypeId = object.productTypeId ?? undefined;
    message.productName = object.productName ?? undefined;
    message.productNumber = object.productNumber ?? undefined;
    message.company = object.company ?? undefined;
    message.companyId = object.companyId ?? undefined;
    message.thickness = object.thickness ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.amountPresent = object.amountPresent ?? undefined;
    message.unitPrice = object.unitPrice ?? undefined;
    message.weight = object.weight ?? undefined;
    message.packSize = object.packSize ?? undefined;
    message.color = object.color ?? undefined;
    message.alloyType = object.alloyType ?? undefined;
    message.hardwareCategory = object.hardwareCategory ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
