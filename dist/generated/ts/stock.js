"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: stock.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateStockRequest = exports.BatchCreateStockRequest = exports.CreateStockRequest = exports.Stock = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "decorcastle";
function createBaseStock() {
    return {
        id: 0,
        productTypeId: 0,
        productName: undefined,
        productNumber: "",
        company: undefined,
        thickness: undefined,
        width: undefined,
        height: undefined,
        amountPresent: 0,
        unitPrice: undefined,
        createdAt: "",
        updatedAt: "",
        lastOrderedAt: undefined,
    };
}
exports.Stock = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.productTypeId !== 0) {
            writer.uint32(16).int32(message.productTypeId);
        }
        if (message.productName !== undefined) {
            writer.uint32(26).string(message.productName);
        }
        if (message.productNumber !== "") {
            writer.uint32(34).string(message.productNumber);
        }
        if (message.company !== undefined) {
            writer.uint32(42).string(message.company);
        }
        if (message.thickness !== undefined) {
            writer.uint32(50).string(message.thickness);
        }
        if (message.width !== undefined) {
            writer.uint32(58).string(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(66).string(message.height);
        }
        if (message.amountPresent !== 0) {
            writer.uint32(72).int32(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(85).float(message.unitPrice);
        }
        if (message.createdAt !== "") {
            writer.uint32(90).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(98).string(message.updatedAt);
        }
        if (message.lastOrderedAt !== undefined) {
            writer.uint32(106).string(message.lastOrderedAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.productTypeId = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.productName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.productNumber = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.company = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.thickness = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.width = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.height = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.amountPresent = reader.int32();
                    continue;
                case 10:
                    if (tag !== 85) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.lastOrderedAt = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : 0,
            productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
            productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : "",
            company: isSet(object.company) ? globalThis.String(object.company) : undefined,
            thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
            width: isSet(object.width) ? globalThis.String(object.width) : undefined,
            height: isSet(object.height) ? globalThis.String(object.height) : undefined,
            amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : 0,
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            lastOrderedAt: isSet(object.lastOrderedAt) ? globalThis.String(object.lastOrderedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.productTypeId !== 0) {
            obj.productTypeId = Math.round(message.productTypeId);
        }
        if (message.productName !== undefined) {
            obj.productName = message.productName;
        }
        if (message.productNumber !== "") {
            obj.productNumber = message.productNumber;
        }
        if (message.company !== undefined) {
            obj.company = message.company;
        }
        if (message.thickness !== undefined) {
            obj.thickness = message.thickness;
        }
        if (message.width !== undefined) {
            obj.width = message.width;
        }
        if (message.height !== undefined) {
            obj.height = message.height;
        }
        if (message.amountPresent !== 0) {
            obj.amountPresent = Math.round(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.lastOrderedAt !== undefined) {
            obj.lastOrderedAt = message.lastOrderedAt;
        }
        return obj;
    },
    create(base) {
        return exports.Stock.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseStock();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.productTypeId = (_b = object.productTypeId) !== null && _b !== void 0 ? _b : 0;
        message.productName = (_c = object.productName) !== null && _c !== void 0 ? _c : undefined;
        message.productNumber = (_d = object.productNumber) !== null && _d !== void 0 ? _d : "";
        message.company = (_e = object.company) !== null && _e !== void 0 ? _e : undefined;
        message.thickness = (_f = object.thickness) !== null && _f !== void 0 ? _f : undefined;
        message.width = (_g = object.width) !== null && _g !== void 0 ? _g : undefined;
        message.height = (_h = object.height) !== null && _h !== void 0 ? _h : undefined;
        message.amountPresent = (_j = object.amountPresent) !== null && _j !== void 0 ? _j : 0;
        message.unitPrice = (_k = object.unitPrice) !== null && _k !== void 0 ? _k : undefined;
        message.createdAt = (_l = object.createdAt) !== null && _l !== void 0 ? _l : "";
        message.updatedAt = (_m = object.updatedAt) !== null && _m !== void 0 ? _m : "";
        message.lastOrderedAt = (_o = object.lastOrderedAt) !== null && _o !== void 0 ? _o : undefined;
        return message;
    },
};
function createBaseCreateStockRequest() {
    return {
        productTypeId: 0,
        productName: undefined,
        productNumber: "",
        company: undefined,
        thickness: undefined,
        width: undefined,
        height: undefined,
        amountPresent: 0,
        unitPrice: undefined,
    };
}
exports.CreateStockRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.productTypeId !== 0) {
            writer.uint32(8).int32(message.productTypeId);
        }
        if (message.productName !== undefined) {
            writer.uint32(18).string(message.productName);
        }
        if (message.productNumber !== "") {
            writer.uint32(26).string(message.productNumber);
        }
        if (message.company !== undefined) {
            writer.uint32(34).string(message.company);
        }
        if (message.thickness !== undefined) {
            writer.uint32(42).string(message.thickness);
        }
        if (message.width !== undefined) {
            writer.uint32(50).string(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(58).string(message.height);
        }
        if (message.amountPresent !== 0) {
            writer.uint32(64).int32(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(77).float(message.unitPrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateStockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.productTypeId = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.productName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.productNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.company = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.thickness = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.amountPresent = reader.int32();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : 0,
            productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
            productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : "",
            company: isSet(object.company) ? globalThis.String(object.company) : undefined,
            thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
            width: isSet(object.width) ? globalThis.String(object.width) : undefined,
            height: isSet(object.height) ? globalThis.String(object.height) : undefined,
            amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : 0,
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.productTypeId !== 0) {
            obj.productTypeId = Math.round(message.productTypeId);
        }
        if (message.productName !== undefined) {
            obj.productName = message.productName;
        }
        if (message.productNumber !== "") {
            obj.productNumber = message.productNumber;
        }
        if (message.company !== undefined) {
            obj.company = message.company;
        }
        if (message.thickness !== undefined) {
            obj.thickness = message.thickness;
        }
        if (message.width !== undefined) {
            obj.width = message.width;
        }
        if (message.height !== undefined) {
            obj.height = message.height;
        }
        if (message.amountPresent !== 0) {
            obj.amountPresent = Math.round(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        return obj;
    },
    create(base) {
        return exports.CreateStockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseCreateStockRequest();
        message.productTypeId = (_a = object.productTypeId) !== null && _a !== void 0 ? _a : 0;
        message.productName = (_b = object.productName) !== null && _b !== void 0 ? _b : undefined;
        message.productNumber = (_c = object.productNumber) !== null && _c !== void 0 ? _c : "";
        message.company = (_d = object.company) !== null && _d !== void 0 ? _d : undefined;
        message.thickness = (_e = object.thickness) !== null && _e !== void 0 ? _e : undefined;
        message.width = (_f = object.width) !== null && _f !== void 0 ? _f : undefined;
        message.height = (_g = object.height) !== null && _g !== void 0 ? _g : undefined;
        message.amountPresent = (_h = object.amountPresent) !== null && _h !== void 0 ? _h : 0;
        message.unitPrice = (_j = object.unitPrice) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function createBaseBatchCreateStockRequest() {
    return { items: [] };
}
exports.BatchCreateStockRequest = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.items) {
            exports.CreateStockRequest.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchCreateStockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.items.push(exports.CreateStockRequest.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            items: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.items)
                ? object.items.map((e) => exports.CreateStockRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.items) === null || _a === void 0 ? void 0 : _a.length) {
            obj.items = message.items.map((e) => exports.CreateStockRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.BatchCreateStockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchCreateStockRequest();
        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e) => exports.CreateStockRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateStockRequest() {
    return {
        productTypeId: undefined,
        productName: undefined,
        productNumber: undefined,
        company: undefined,
        thickness: undefined,
        width: undefined,
        height: undefined,
        amountPresent: undefined,
        unitPrice: undefined,
    };
}
exports.UpdateStockRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.productTypeId !== undefined) {
            writer.uint32(8).int32(message.productTypeId);
        }
        if (message.productName !== undefined) {
            writer.uint32(18).string(message.productName);
        }
        if (message.productNumber !== undefined) {
            writer.uint32(26).string(message.productNumber);
        }
        if (message.company !== undefined) {
            writer.uint32(34).string(message.company);
        }
        if (message.thickness !== undefined) {
            writer.uint32(42).string(message.thickness);
        }
        if (message.width !== undefined) {
            writer.uint32(50).string(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(58).string(message.height);
        }
        if (message.amountPresent !== undefined) {
            writer.uint32(64).int32(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(77).float(message.unitPrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.productTypeId = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.productName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.productNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.company = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.thickness = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.width = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.height = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.amountPresent = reader.int32();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            productTypeId: isSet(object.productTypeId) ? globalThis.Number(object.productTypeId) : undefined,
            productName: isSet(object.productName) ? globalThis.String(object.productName) : undefined,
            productNumber: isSet(object.productNumber) ? globalThis.String(object.productNumber) : undefined,
            company: isSet(object.company) ? globalThis.String(object.company) : undefined,
            thickness: isSet(object.thickness) ? globalThis.String(object.thickness) : undefined,
            width: isSet(object.width) ? globalThis.String(object.width) : undefined,
            height: isSet(object.height) ? globalThis.String(object.height) : undefined,
            amountPresent: isSet(object.amountPresent) ? globalThis.Number(object.amountPresent) : undefined,
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.productTypeId !== undefined) {
            obj.productTypeId = Math.round(message.productTypeId);
        }
        if (message.productName !== undefined) {
            obj.productName = message.productName;
        }
        if (message.productNumber !== undefined) {
            obj.productNumber = message.productNumber;
        }
        if (message.company !== undefined) {
            obj.company = message.company;
        }
        if (message.thickness !== undefined) {
            obj.thickness = message.thickness;
        }
        if (message.width !== undefined) {
            obj.width = message.width;
        }
        if (message.height !== undefined) {
            obj.height = message.height;
        }
        if (message.amountPresent !== undefined) {
            obj.amountPresent = Math.round(message.amountPresent);
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateStockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateStockRequest();
        message.productTypeId = (_a = object.productTypeId) !== null && _a !== void 0 ? _a : undefined;
        message.productName = (_b = object.productName) !== null && _b !== void 0 ? _b : undefined;
        message.productNumber = (_c = object.productNumber) !== null && _c !== void 0 ? _c : undefined;
        message.company = (_d = object.company) !== null && _d !== void 0 ? _d : undefined;
        message.thickness = (_e = object.thickness) !== null && _e !== void 0 ? _e : undefined;
        message.width = (_f = object.width) !== null && _f !== void 0 ? _f : undefined;
        message.height = (_g = object.height) !== null && _g !== void 0 ? _g : undefined;
        message.amountPresent = (_h = object.amountPresent) !== null && _h !== void 0 ? _h : undefined;
        message.unitPrice = (_j = object.unitPrice) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
