"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: order_book.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderBookSummary_OrdersByPriorityEntry = exports.OrderBookSummary_OrdersByStatusEntry = exports.OrderBookSummary = exports.OrderStatusUpdateRequest = exports.UpdateOrderBookRequest = exports.CreateOrderBookRequest = exports.OrderBook = exports.OrderStatus = exports.protobufPackage = void 0;
exports.orderStatusFromJSON = orderStatusFromJSON;
exports.orderStatusToJSON = orderStatusToJSON;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "decorcastle";
/** Order status enum */
var OrderStatus;
(function (OrderStatus) {
    OrderStatus[OrderStatus["RECEIVED"] = 0] = "RECEIVED";
    OrderStatus[OrderStatus["CONFIRMED"] = 1] = "CONFIRMED";
    OrderStatus[OrderStatus["PROCESSING"] = 2] = "PROCESSING";
    OrderStatus[OrderStatus["CUTTING"] = 3] = "CUTTING";
    OrderStatus[OrderStatus["FABRICATING"] = 4] = "FABRICATING";
    OrderStatus[OrderStatus["QUALITY_CHECK"] = 5] = "QUALITY_CHECK";
    OrderStatus[OrderStatus["READY_FOR_DISPATCH"] = 6] = "READY_FOR_DISPATCH";
    OrderStatus[OrderStatus["DISPATCHED"] = 7] = "DISPATCHED";
    OrderStatus[OrderStatus["IN_TRANSIT"] = 8] = "IN_TRANSIT";
    OrderStatus[OrderStatus["DELIVERED"] = 9] = "DELIVERED";
    OrderStatus[OrderStatus["PARTIALLY_DELIVERED"] = 10] = "PARTIALLY_DELIVERED";
    OrderStatus[OrderStatus["COMPLETED"] = 11] = "COMPLETED";
    OrderStatus[OrderStatus["INVOICED"] = 12] = "INVOICED";
    OrderStatus[OrderStatus["ON_HOLD"] = 13] = "ON_HOLD";
    OrderStatus[OrderStatus["CANCELLED"] = 14] = "CANCELLED";
    OrderStatus[OrderStatus["RETURNED"] = 15] = "RETURNED";
    OrderStatus[OrderStatus["REFUNDED"] = 16] = "REFUNDED";
    OrderStatus[OrderStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OrderStatus || (exports.OrderStatus = OrderStatus = {}));
function orderStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "RECEIVED":
            return OrderStatus.RECEIVED;
        case 1:
        case "CONFIRMED":
            return OrderStatus.CONFIRMED;
        case 2:
        case "PROCESSING":
            return OrderStatus.PROCESSING;
        case 3:
        case "CUTTING":
            return OrderStatus.CUTTING;
        case 4:
        case "FABRICATING":
            return OrderStatus.FABRICATING;
        case 5:
        case "QUALITY_CHECK":
            return OrderStatus.QUALITY_CHECK;
        case 6:
        case "READY_FOR_DISPATCH":
            return OrderStatus.READY_FOR_DISPATCH;
        case 7:
        case "DISPATCHED":
            return OrderStatus.DISPATCHED;
        case 8:
        case "IN_TRANSIT":
            return OrderStatus.IN_TRANSIT;
        case 9:
        case "DELIVERED":
            return OrderStatus.DELIVERED;
        case 10:
        case "PARTIALLY_DELIVERED":
            return OrderStatus.PARTIALLY_DELIVERED;
        case 11:
        case "COMPLETED":
            return OrderStatus.COMPLETED;
        case 12:
        case "INVOICED":
            return OrderStatus.INVOICED;
        case 13:
        case "ON_HOLD":
            return OrderStatus.ON_HOLD;
        case 14:
        case "CANCELLED":
            return OrderStatus.CANCELLED;
        case 15:
        case "RETURNED":
            return OrderStatus.RETURNED;
        case 16:
        case "REFUNDED":
            return OrderStatus.REFUNDED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OrderStatus.UNRECOGNIZED;
    }
}
function orderStatusToJSON(object) {
    switch (object) {
        case OrderStatus.RECEIVED:
            return "RECEIVED";
        case OrderStatus.CONFIRMED:
            return "CONFIRMED";
        case OrderStatus.PROCESSING:
            return "PROCESSING";
        case OrderStatus.CUTTING:
            return "CUTTING";
        case OrderStatus.FABRICATING:
            return "FABRICATING";
        case OrderStatus.QUALITY_CHECK:
            return "QUALITY_CHECK";
        case OrderStatus.READY_FOR_DISPATCH:
            return "READY_FOR_DISPATCH";
        case OrderStatus.DISPATCHED:
            return "DISPATCHED";
        case OrderStatus.IN_TRANSIT:
            return "IN_TRANSIT";
        case OrderStatus.DELIVERED:
            return "DELIVERED";
        case OrderStatus.PARTIALLY_DELIVERED:
            return "PARTIALLY_DELIVERED";
        case OrderStatus.COMPLETED:
            return "COMPLETED";
        case OrderStatus.INVOICED:
            return "INVOICED";
        case OrderStatus.ON_HOLD:
            return "ON_HOLD";
        case OrderStatus.CANCELLED:
            return "CANCELLED";
        case OrderStatus.RETURNED:
            return "RETURNED";
        case OrderStatus.REFUNDED:
            return "REFUNDED";
        case OrderStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseOrderBook() {
    return {
        id: 0,
        orderNumber: "",
        customerOrderNumber: undefined,
        customerName: "",
        customerContact: undefined,
        customerEmail: undefined,
        customerAddress: undefined,
        deliveryAddress: undefined,
        deliveryContact: undefined,
        deliveryDate: undefined,
        productDescription: "",
        productType: undefined,
        specifications: undefined,
        quantity: 0,
        unit: "",
        unitPrice: undefined,
        totalAmount: undefined,
        status: 0,
        priority: "",
        orderDate: "",
        expectedCompletionDate: undefined,
        actualCompletionDate: undefined,
        dispatchDate: undefined,
        notes: undefined,
        specialInstructions: undefined,
        tallyVoucherNumber: undefined,
        isBilledInTally: false,
        tallyBillDate: undefined,
        stockId: undefined,
        creditorId: undefined,
        createdAt: "",
        updatedAt: "",
    };
}
exports.OrderBook = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.orderNumber !== "") {
            writer.uint32(18).string(message.orderNumber);
        }
        if (message.customerOrderNumber !== undefined) {
            writer.uint32(26).string(message.customerOrderNumber);
        }
        if (message.customerName !== "") {
            writer.uint32(34).string(message.customerName);
        }
        if (message.customerContact !== undefined) {
            writer.uint32(42).string(message.customerContact);
        }
        if (message.customerEmail !== undefined) {
            writer.uint32(50).string(message.customerEmail);
        }
        if (message.customerAddress !== undefined) {
            writer.uint32(58).string(message.customerAddress);
        }
        if (message.deliveryAddress !== undefined) {
            writer.uint32(66).string(message.deliveryAddress);
        }
        if (message.deliveryContact !== undefined) {
            writer.uint32(74).string(message.deliveryContact);
        }
        if (message.deliveryDate !== undefined) {
            writer.uint32(82).string(message.deliveryDate);
        }
        if (message.productDescription !== "") {
            writer.uint32(90).string(message.productDescription);
        }
        if (message.productType !== undefined) {
            writer.uint32(98).string(message.productType);
        }
        if (message.specifications !== undefined) {
            writer.uint32(106).string(message.specifications);
        }
        if (message.quantity !== 0) {
            writer.uint32(112).int32(message.quantity);
        }
        if (message.unit !== "") {
            writer.uint32(122).string(message.unit);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(133).float(message.unitPrice);
        }
        if (message.totalAmount !== undefined) {
            writer.uint32(141).float(message.totalAmount);
        }
        if (message.status !== 0) {
            writer.uint32(144).int32(message.status);
        }
        if (message.priority !== "") {
            writer.uint32(154).string(message.priority);
        }
        if (message.orderDate !== "") {
            writer.uint32(162).string(message.orderDate);
        }
        if (message.expectedCompletionDate !== undefined) {
            writer.uint32(170).string(message.expectedCompletionDate);
        }
        if (message.actualCompletionDate !== undefined) {
            writer.uint32(178).string(message.actualCompletionDate);
        }
        if (message.dispatchDate !== undefined) {
            writer.uint32(186).string(message.dispatchDate);
        }
        if (message.notes !== undefined) {
            writer.uint32(202).string(message.notes);
        }
        if (message.specialInstructions !== undefined) {
            writer.uint32(210).string(message.specialInstructions);
        }
        if (message.tallyVoucherNumber !== undefined) {
            writer.uint32(218).string(message.tallyVoucherNumber);
        }
        if (message.isBilledInTally !== false) {
            writer.uint32(224).bool(message.isBilledInTally);
        }
        if (message.tallyBillDate !== undefined) {
            writer.uint32(234).string(message.tallyBillDate);
        }
        if (message.stockId !== undefined) {
            writer.uint32(240).int32(message.stockId);
        }
        if (message.creditorId !== undefined) {
            writer.uint32(248).int32(message.creditorId);
        }
        if (message.createdAt !== "") {
            writer.uint32(258).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(266).string(message.updatedAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderBook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.orderNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.customerOrderNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.customerName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.customerContact = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customerEmail = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.customerAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.deliveryAddress = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.deliveryContact = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.deliveryDate = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.productDescription = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.productType = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.specifications = reader.string();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.unit = reader.string();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
                case 17:
                    if (tag !== 141) {
                        break;
                    }
                    message.totalAmount = reader.float();
                    continue;
                case 18:
                    if (tag !== 144) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.priority = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.orderDate = reader.string();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.expectedCompletionDate = reader.string();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.actualCompletionDate = reader.string();
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.dispatchDate = reader.string();
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.notes = reader.string();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.specialInstructions = reader.string();
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.tallyVoucherNumber = reader.string();
                    continue;
                case 28:
                    if (tag !== 224) {
                        break;
                    }
                    message.isBilledInTally = reader.bool();
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.tallyBillDate = reader.string();
                    continue;
                case 30:
                    if (tag !== 240) {
                        break;
                    }
                    message.stockId = reader.int32();
                    continue;
                case 31:
                    if (tag !== 248) {
                        break;
                    }
                    message.creditorId = reader.int32();
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : "",
            customerOrderNumber: isSet(object.customerOrderNumber)
                ? globalThis.String(object.customerOrderNumber)
                : undefined,
            customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : "",
            customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
            customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
            customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
            deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
            deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
            deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
            productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : "",
            productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
            specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
            totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
            status: isSet(object.status) ? orderStatusFromJSON(object.status) : 0,
            priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
            orderDate: isSet(object.orderDate) ? globalThis.String(object.orderDate) : "",
            expectedCompletionDate: isSet(object.expectedCompletionDate)
                ? globalThis.String(object.expectedCompletionDate)
                : undefined,
            actualCompletionDate: isSet(object.actualCompletionDate)
                ? globalThis.String(object.actualCompletionDate)
                : undefined,
            dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
            notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
            specialInstructions: isSet(object.specialInstructions)
                ? globalThis.String(object.specialInstructions)
                : undefined,
            tallyVoucherNumber: isSet(object.tallyVoucherNumber) ? globalThis.String(object.tallyVoucherNumber) : undefined,
            isBilledInTally: isSet(object.isBilledInTally) ? globalThis.Boolean(object.isBilledInTally) : false,
            tallyBillDate: isSet(object.tallyBillDate) ? globalThis.String(object.tallyBillDate) : undefined,
            stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
            creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.orderNumber !== "") {
            obj.orderNumber = message.orderNumber;
        }
        if (message.customerOrderNumber !== undefined) {
            obj.customerOrderNumber = message.customerOrderNumber;
        }
        if (message.customerName !== "") {
            obj.customerName = message.customerName;
        }
        if (message.customerContact !== undefined) {
            obj.customerContact = message.customerContact;
        }
        if (message.customerEmail !== undefined) {
            obj.customerEmail = message.customerEmail;
        }
        if (message.customerAddress !== undefined) {
            obj.customerAddress = message.customerAddress;
        }
        if (message.deliveryAddress !== undefined) {
            obj.deliveryAddress = message.deliveryAddress;
        }
        if (message.deliveryContact !== undefined) {
            obj.deliveryContact = message.deliveryContact;
        }
        if (message.deliveryDate !== undefined) {
            obj.deliveryDate = message.deliveryDate;
        }
        if (message.productDescription !== "") {
            obj.productDescription = message.productDescription;
        }
        if (message.productType !== undefined) {
            obj.productType = message.productType;
        }
        if (message.specifications !== undefined) {
            obj.specifications = message.specifications;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.unit !== "") {
            obj.unit = message.unit;
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        if (message.totalAmount !== undefined) {
            obj.totalAmount = message.totalAmount;
        }
        if (message.status !== 0) {
            obj.status = orderStatusToJSON(message.status);
        }
        if (message.priority !== "") {
            obj.priority = message.priority;
        }
        if (message.orderDate !== "") {
            obj.orderDate = message.orderDate;
        }
        if (message.expectedCompletionDate !== undefined) {
            obj.expectedCompletionDate = message.expectedCompletionDate;
        }
        if (message.actualCompletionDate !== undefined) {
            obj.actualCompletionDate = message.actualCompletionDate;
        }
        if (message.dispatchDate !== undefined) {
            obj.dispatchDate = message.dispatchDate;
        }
        if (message.notes !== undefined) {
            obj.notes = message.notes;
        }
        if (message.specialInstructions !== undefined) {
            obj.specialInstructions = message.specialInstructions;
        }
        if (message.tallyVoucherNumber !== undefined) {
            obj.tallyVoucherNumber = message.tallyVoucherNumber;
        }
        if (message.isBilledInTally !== false) {
            obj.isBilledInTally = message.isBilledInTally;
        }
        if (message.tallyBillDate !== undefined) {
            obj.tallyBillDate = message.tallyBillDate;
        }
        if (message.stockId !== undefined) {
            obj.stockId = Math.round(message.stockId);
        }
        if (message.creditorId !== undefined) {
            obj.creditorId = Math.round(message.creditorId);
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        return obj;
    },
    create(base) {
        return exports.OrderBook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
        const message = createBaseOrderBook();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.orderNumber = (_b = object.orderNumber) !== null && _b !== void 0 ? _b : "";
        message.customerOrderNumber = (_c = object.customerOrderNumber) !== null && _c !== void 0 ? _c : undefined;
        message.customerName = (_d = object.customerName) !== null && _d !== void 0 ? _d : "";
        message.customerContact = (_e = object.customerContact) !== null && _e !== void 0 ? _e : undefined;
        message.customerEmail = (_f = object.customerEmail) !== null && _f !== void 0 ? _f : undefined;
        message.customerAddress = (_g = object.customerAddress) !== null && _g !== void 0 ? _g : undefined;
        message.deliveryAddress = (_h = object.deliveryAddress) !== null && _h !== void 0 ? _h : undefined;
        message.deliveryContact = (_j = object.deliveryContact) !== null && _j !== void 0 ? _j : undefined;
        message.deliveryDate = (_k = object.deliveryDate) !== null && _k !== void 0 ? _k : undefined;
        message.productDescription = (_l = object.productDescription) !== null && _l !== void 0 ? _l : "";
        message.productType = (_m = object.productType) !== null && _m !== void 0 ? _m : undefined;
        message.specifications = (_o = object.specifications) !== null && _o !== void 0 ? _o : undefined;
        message.quantity = (_p = object.quantity) !== null && _p !== void 0 ? _p : 0;
        message.unit = (_q = object.unit) !== null && _q !== void 0 ? _q : "";
        message.unitPrice = (_r = object.unitPrice) !== null && _r !== void 0 ? _r : undefined;
        message.totalAmount = (_s = object.totalAmount) !== null && _s !== void 0 ? _s : undefined;
        message.status = (_t = object.status) !== null && _t !== void 0 ? _t : 0;
        message.priority = (_u = object.priority) !== null && _u !== void 0 ? _u : "";
        message.orderDate = (_v = object.orderDate) !== null && _v !== void 0 ? _v : "";
        message.expectedCompletionDate = (_w = object.expectedCompletionDate) !== null && _w !== void 0 ? _w : undefined;
        message.actualCompletionDate = (_x = object.actualCompletionDate) !== null && _x !== void 0 ? _x : undefined;
        message.dispatchDate = (_y = object.dispatchDate) !== null && _y !== void 0 ? _y : undefined;
        message.notes = (_z = object.notes) !== null && _z !== void 0 ? _z : undefined;
        message.specialInstructions = (_0 = object.specialInstructions) !== null && _0 !== void 0 ? _0 : undefined;
        message.tallyVoucherNumber = (_1 = object.tallyVoucherNumber) !== null && _1 !== void 0 ? _1 : undefined;
        message.isBilledInTally = (_2 = object.isBilledInTally) !== null && _2 !== void 0 ? _2 : false;
        message.tallyBillDate = (_3 = object.tallyBillDate) !== null && _3 !== void 0 ? _3 : undefined;
        message.stockId = (_4 = object.stockId) !== null && _4 !== void 0 ? _4 : undefined;
        message.creditorId = (_5 = object.creditorId) !== null && _5 !== void 0 ? _5 : undefined;
        message.createdAt = (_6 = object.createdAt) !== null && _6 !== void 0 ? _6 : "";
        message.updatedAt = (_7 = object.updatedAt) !== null && _7 !== void 0 ? _7 : "";
        return message;
    },
};
function createBaseCreateOrderBookRequest() {
    return {
        orderNumber: "",
        customerOrderNumber: undefined,
        customerName: "",
        customerContact: undefined,
        customerEmail: undefined,
        customerAddress: undefined,
        deliveryAddress: undefined,
        deliveryContact: undefined,
        deliveryDate: undefined,
        productDescription: "",
        productType: undefined,
        specifications: undefined,
        quantity: 0,
        unit: "",
        unitPrice: undefined,
        totalAmount: undefined,
        priority: "",
        expectedCompletionDate: undefined,
        notes: undefined,
        specialInstructions: undefined,
        stockId: undefined,
        creditorId: undefined,
    };
}
exports.CreateOrderBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.orderNumber !== "") {
            writer.uint32(10).string(message.orderNumber);
        }
        if (message.customerOrderNumber !== undefined) {
            writer.uint32(18).string(message.customerOrderNumber);
        }
        if (message.customerName !== "") {
            writer.uint32(26).string(message.customerName);
        }
        if (message.customerContact !== undefined) {
            writer.uint32(34).string(message.customerContact);
        }
        if (message.customerEmail !== undefined) {
            writer.uint32(42).string(message.customerEmail);
        }
        if (message.customerAddress !== undefined) {
            writer.uint32(50).string(message.customerAddress);
        }
        if (message.deliveryAddress !== undefined) {
            writer.uint32(58).string(message.deliveryAddress);
        }
        if (message.deliveryContact !== undefined) {
            writer.uint32(66).string(message.deliveryContact);
        }
        if (message.deliveryDate !== undefined) {
            writer.uint32(74).string(message.deliveryDate);
        }
        if (message.productDescription !== "") {
            writer.uint32(82).string(message.productDescription);
        }
        if (message.productType !== undefined) {
            writer.uint32(90).string(message.productType);
        }
        if (message.specifications !== undefined) {
            writer.uint32(98).string(message.specifications);
        }
        if (message.quantity !== 0) {
            writer.uint32(104).int32(message.quantity);
        }
        if (message.unit !== "") {
            writer.uint32(114).string(message.unit);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(125).float(message.unitPrice);
        }
        if (message.totalAmount !== undefined) {
            writer.uint32(133).float(message.totalAmount);
        }
        if (message.priority !== "") {
            writer.uint32(138).string(message.priority);
        }
        if (message.expectedCompletionDate !== undefined) {
            writer.uint32(146).string(message.expectedCompletionDate);
        }
        if (message.notes !== undefined) {
            writer.uint32(154).string(message.notes);
        }
        if (message.specialInstructions !== undefined) {
            writer.uint32(162).string(message.specialInstructions);
        }
        if (message.stockId !== undefined) {
            writer.uint32(168).int32(message.stockId);
        }
        if (message.creditorId !== undefined) {
            writer.uint32(176).int32(message.creditorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrderBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orderNumber = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.customerOrderNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.customerName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.customerContact = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.customerEmail = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customerAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.deliveryAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.deliveryContact = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.deliveryDate = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.productDescription = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.productType = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.specifications = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.unit = reader.string();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.totalAmount = reader.float();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.priority = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.expectedCompletionDate = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.notes = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.specialInstructions = reader.string();
                    continue;
                case 21:
                    if (tag !== 168) {
                        break;
                    }
                    message.stockId = reader.int32();
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.creditorId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : "",
            customerOrderNumber: isSet(object.customerOrderNumber)
                ? globalThis.String(object.customerOrderNumber)
                : undefined,
            customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : "",
            customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
            customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
            customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
            deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
            deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
            deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
            productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : "",
            productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
            specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
            unit: isSet(object.unit) ? globalThis.String(object.unit) : "",
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
            totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
            priority: isSet(object.priority) ? globalThis.String(object.priority) : "",
            expectedCompletionDate: isSet(object.expectedCompletionDate)
                ? globalThis.String(object.expectedCompletionDate)
                : undefined,
            notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
            specialInstructions: isSet(object.specialInstructions)
                ? globalThis.String(object.specialInstructions)
                : undefined,
            stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
            creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orderNumber !== "") {
            obj.orderNumber = message.orderNumber;
        }
        if (message.customerOrderNumber !== undefined) {
            obj.customerOrderNumber = message.customerOrderNumber;
        }
        if (message.customerName !== "") {
            obj.customerName = message.customerName;
        }
        if (message.customerContact !== undefined) {
            obj.customerContact = message.customerContact;
        }
        if (message.customerEmail !== undefined) {
            obj.customerEmail = message.customerEmail;
        }
        if (message.customerAddress !== undefined) {
            obj.customerAddress = message.customerAddress;
        }
        if (message.deliveryAddress !== undefined) {
            obj.deliveryAddress = message.deliveryAddress;
        }
        if (message.deliveryContact !== undefined) {
            obj.deliveryContact = message.deliveryContact;
        }
        if (message.deliveryDate !== undefined) {
            obj.deliveryDate = message.deliveryDate;
        }
        if (message.productDescription !== "") {
            obj.productDescription = message.productDescription;
        }
        if (message.productType !== undefined) {
            obj.productType = message.productType;
        }
        if (message.specifications !== undefined) {
            obj.specifications = message.specifications;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.unit !== "") {
            obj.unit = message.unit;
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        if (message.totalAmount !== undefined) {
            obj.totalAmount = message.totalAmount;
        }
        if (message.priority !== "") {
            obj.priority = message.priority;
        }
        if (message.expectedCompletionDate !== undefined) {
            obj.expectedCompletionDate = message.expectedCompletionDate;
        }
        if (message.notes !== undefined) {
            obj.notes = message.notes;
        }
        if (message.specialInstructions !== undefined) {
            obj.specialInstructions = message.specialInstructions;
        }
        if (message.stockId !== undefined) {
            obj.stockId = Math.round(message.stockId);
        }
        if (message.creditorId !== undefined) {
            obj.creditorId = Math.round(message.creditorId);
        }
        return obj;
    },
    create(base) {
        return exports.CreateOrderBookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        const message = createBaseCreateOrderBookRequest();
        message.orderNumber = (_a = object.orderNumber) !== null && _a !== void 0 ? _a : "";
        message.customerOrderNumber = (_b = object.customerOrderNumber) !== null && _b !== void 0 ? _b : undefined;
        message.customerName = (_c = object.customerName) !== null && _c !== void 0 ? _c : "";
        message.customerContact = (_d = object.customerContact) !== null && _d !== void 0 ? _d : undefined;
        message.customerEmail = (_e = object.customerEmail) !== null && _e !== void 0 ? _e : undefined;
        message.customerAddress = (_f = object.customerAddress) !== null && _f !== void 0 ? _f : undefined;
        message.deliveryAddress = (_g = object.deliveryAddress) !== null && _g !== void 0 ? _g : undefined;
        message.deliveryContact = (_h = object.deliveryContact) !== null && _h !== void 0 ? _h : undefined;
        message.deliveryDate = (_j = object.deliveryDate) !== null && _j !== void 0 ? _j : undefined;
        message.productDescription = (_k = object.productDescription) !== null && _k !== void 0 ? _k : "";
        message.productType = (_l = object.productType) !== null && _l !== void 0 ? _l : undefined;
        message.specifications = (_m = object.specifications) !== null && _m !== void 0 ? _m : undefined;
        message.quantity = (_o = object.quantity) !== null && _o !== void 0 ? _o : 0;
        message.unit = (_p = object.unit) !== null && _p !== void 0 ? _p : "";
        message.unitPrice = (_q = object.unitPrice) !== null && _q !== void 0 ? _q : undefined;
        message.totalAmount = (_r = object.totalAmount) !== null && _r !== void 0 ? _r : undefined;
        message.priority = (_s = object.priority) !== null && _s !== void 0 ? _s : "";
        message.expectedCompletionDate = (_t = object.expectedCompletionDate) !== null && _t !== void 0 ? _t : undefined;
        message.notes = (_u = object.notes) !== null && _u !== void 0 ? _u : undefined;
        message.specialInstructions = (_v = object.specialInstructions) !== null && _v !== void 0 ? _v : undefined;
        message.stockId = (_w = object.stockId) !== null && _w !== void 0 ? _w : undefined;
        message.creditorId = (_x = object.creditorId) !== null && _x !== void 0 ? _x : undefined;
        return message;
    },
};
function createBaseUpdateOrderBookRequest() {
    return {
        orderNumber: undefined,
        customerOrderNumber: undefined,
        customerName: undefined,
        customerContact: undefined,
        customerEmail: undefined,
        customerAddress: undefined,
        deliveryAddress: undefined,
        deliveryContact: undefined,
        deliveryDate: undefined,
        productDescription: undefined,
        productType: undefined,
        specifications: undefined,
        quantity: undefined,
        unit: undefined,
        unitPrice: undefined,
        totalAmount: undefined,
        status: undefined,
        priority: undefined,
        expectedCompletionDate: undefined,
        actualCompletionDate: undefined,
        dispatchDate: undefined,
        notes: undefined,
        specialInstructions: undefined,
        tallyVoucherNumber: undefined,
        isBilledInTally: undefined,
        tallyBillDate: undefined,
        stockId: undefined,
        creditorId: undefined,
    };
}
exports.UpdateOrderBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.orderNumber !== undefined) {
            writer.uint32(10).string(message.orderNumber);
        }
        if (message.customerOrderNumber !== undefined) {
            writer.uint32(18).string(message.customerOrderNumber);
        }
        if (message.customerName !== undefined) {
            writer.uint32(26).string(message.customerName);
        }
        if (message.customerContact !== undefined) {
            writer.uint32(34).string(message.customerContact);
        }
        if (message.customerEmail !== undefined) {
            writer.uint32(42).string(message.customerEmail);
        }
        if (message.customerAddress !== undefined) {
            writer.uint32(50).string(message.customerAddress);
        }
        if (message.deliveryAddress !== undefined) {
            writer.uint32(58).string(message.deliveryAddress);
        }
        if (message.deliveryContact !== undefined) {
            writer.uint32(66).string(message.deliveryContact);
        }
        if (message.deliveryDate !== undefined) {
            writer.uint32(74).string(message.deliveryDate);
        }
        if (message.productDescription !== undefined) {
            writer.uint32(82).string(message.productDescription);
        }
        if (message.productType !== undefined) {
            writer.uint32(90).string(message.productType);
        }
        if (message.specifications !== undefined) {
            writer.uint32(98).string(message.specifications);
        }
        if (message.quantity !== undefined) {
            writer.uint32(104).int32(message.quantity);
        }
        if (message.unit !== undefined) {
            writer.uint32(114).string(message.unit);
        }
        if (message.unitPrice !== undefined) {
            writer.uint32(125).float(message.unitPrice);
        }
        if (message.totalAmount !== undefined) {
            writer.uint32(133).float(message.totalAmount);
        }
        if (message.status !== undefined) {
            writer.uint32(136).int32(message.status);
        }
        if (message.priority !== undefined) {
            writer.uint32(146).string(message.priority);
        }
        if (message.expectedCompletionDate !== undefined) {
            writer.uint32(154).string(message.expectedCompletionDate);
        }
        if (message.actualCompletionDate !== undefined) {
            writer.uint32(162).string(message.actualCompletionDate);
        }
        if (message.dispatchDate !== undefined) {
            writer.uint32(170).string(message.dispatchDate);
        }
        if (message.notes !== undefined) {
            writer.uint32(178).string(message.notes);
        }
        if (message.specialInstructions !== undefined) {
            writer.uint32(186).string(message.specialInstructions);
        }
        if (message.tallyVoucherNumber !== undefined) {
            writer.uint32(194).string(message.tallyVoucherNumber);
        }
        if (message.isBilledInTally !== undefined) {
            writer.uint32(200).bool(message.isBilledInTally);
        }
        if (message.tallyBillDate !== undefined) {
            writer.uint32(210).string(message.tallyBillDate);
        }
        if (message.stockId !== undefined) {
            writer.uint32(216).int32(message.stockId);
        }
        if (message.creditorId !== undefined) {
            writer.uint32(224).int32(message.creditorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrderBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orderNumber = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.customerOrderNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.customerName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.customerContact = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.customerEmail = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customerAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.deliveryAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.deliveryContact = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.deliveryDate = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.productDescription = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.productType = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.specifications = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.unit = reader.string();
                    continue;
                case 15:
                    if (tag !== 125) {
                        break;
                    }
                    message.unitPrice = reader.float();
                    continue;
                case 16:
                    if (tag !== 133) {
                        break;
                    }
                    message.totalAmount = reader.float();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.priority = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.expectedCompletionDate = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.actualCompletionDate = reader.string();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.dispatchDate = reader.string();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.notes = reader.string();
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.specialInstructions = reader.string();
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.tallyVoucherNumber = reader.string();
                    continue;
                case 25:
                    if (tag !== 200) {
                        break;
                    }
                    message.isBilledInTally = reader.bool();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.tallyBillDate = reader.string();
                    continue;
                case 27:
                    if (tag !== 216) {
                        break;
                    }
                    message.stockId = reader.int32();
                    continue;
                case 28:
                    if (tag !== 224) {
                        break;
                    }
                    message.creditorId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orderNumber: isSet(object.orderNumber) ? globalThis.String(object.orderNumber) : undefined,
            customerOrderNumber: isSet(object.customerOrderNumber)
                ? globalThis.String(object.customerOrderNumber)
                : undefined,
            customerName: isSet(object.customerName) ? globalThis.String(object.customerName) : undefined,
            customerContact: isSet(object.customerContact) ? globalThis.String(object.customerContact) : undefined,
            customerEmail: isSet(object.customerEmail) ? globalThis.String(object.customerEmail) : undefined,
            customerAddress: isSet(object.customerAddress) ? globalThis.String(object.customerAddress) : undefined,
            deliveryAddress: isSet(object.deliveryAddress) ? globalThis.String(object.deliveryAddress) : undefined,
            deliveryContact: isSet(object.deliveryContact) ? globalThis.String(object.deliveryContact) : undefined,
            deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
            productDescription: isSet(object.productDescription) ? globalThis.String(object.productDescription) : undefined,
            productType: isSet(object.productType) ? globalThis.String(object.productType) : undefined,
            specifications: isSet(object.specifications) ? globalThis.String(object.specifications) : undefined,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : undefined,
            unit: isSet(object.unit) ? globalThis.String(object.unit) : undefined,
            unitPrice: isSet(object.unitPrice) ? globalThis.Number(object.unitPrice) : undefined,
            totalAmount: isSet(object.totalAmount) ? globalThis.Number(object.totalAmount) : undefined,
            status: isSet(object.status) ? orderStatusFromJSON(object.status) : undefined,
            priority: isSet(object.priority) ? globalThis.String(object.priority) : undefined,
            expectedCompletionDate: isSet(object.expectedCompletionDate)
                ? globalThis.String(object.expectedCompletionDate)
                : undefined,
            actualCompletionDate: isSet(object.actualCompletionDate)
                ? globalThis.String(object.actualCompletionDate)
                : undefined,
            dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
            notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
            specialInstructions: isSet(object.specialInstructions)
                ? globalThis.String(object.specialInstructions)
                : undefined,
            tallyVoucherNumber: isSet(object.tallyVoucherNumber) ? globalThis.String(object.tallyVoucherNumber) : undefined,
            isBilledInTally: isSet(object.isBilledInTally) ? globalThis.Boolean(object.isBilledInTally) : undefined,
            tallyBillDate: isSet(object.tallyBillDate) ? globalThis.String(object.tallyBillDate) : undefined,
            stockId: isSet(object.stockId) ? globalThis.Number(object.stockId) : undefined,
            creditorId: isSet(object.creditorId) ? globalThis.Number(object.creditorId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orderNumber !== undefined) {
            obj.orderNumber = message.orderNumber;
        }
        if (message.customerOrderNumber !== undefined) {
            obj.customerOrderNumber = message.customerOrderNumber;
        }
        if (message.customerName !== undefined) {
            obj.customerName = message.customerName;
        }
        if (message.customerContact !== undefined) {
            obj.customerContact = message.customerContact;
        }
        if (message.customerEmail !== undefined) {
            obj.customerEmail = message.customerEmail;
        }
        if (message.customerAddress !== undefined) {
            obj.customerAddress = message.customerAddress;
        }
        if (message.deliveryAddress !== undefined) {
            obj.deliveryAddress = message.deliveryAddress;
        }
        if (message.deliveryContact !== undefined) {
            obj.deliveryContact = message.deliveryContact;
        }
        if (message.deliveryDate !== undefined) {
            obj.deliveryDate = message.deliveryDate;
        }
        if (message.productDescription !== undefined) {
            obj.productDescription = message.productDescription;
        }
        if (message.productType !== undefined) {
            obj.productType = message.productType;
        }
        if (message.specifications !== undefined) {
            obj.specifications = message.specifications;
        }
        if (message.quantity !== undefined) {
            obj.quantity = Math.round(message.quantity);
        }
        if (message.unit !== undefined) {
            obj.unit = message.unit;
        }
        if (message.unitPrice !== undefined) {
            obj.unitPrice = message.unitPrice;
        }
        if (message.totalAmount !== undefined) {
            obj.totalAmount = message.totalAmount;
        }
        if (message.status !== undefined) {
            obj.status = orderStatusToJSON(message.status);
        }
        if (message.priority !== undefined) {
            obj.priority = message.priority;
        }
        if (message.expectedCompletionDate !== undefined) {
            obj.expectedCompletionDate = message.expectedCompletionDate;
        }
        if (message.actualCompletionDate !== undefined) {
            obj.actualCompletionDate = message.actualCompletionDate;
        }
        if (message.dispatchDate !== undefined) {
            obj.dispatchDate = message.dispatchDate;
        }
        if (message.notes !== undefined) {
            obj.notes = message.notes;
        }
        if (message.specialInstructions !== undefined) {
            obj.specialInstructions = message.specialInstructions;
        }
        if (message.tallyVoucherNumber !== undefined) {
            obj.tallyVoucherNumber = message.tallyVoucherNumber;
        }
        if (message.isBilledInTally !== undefined) {
            obj.isBilledInTally = message.isBilledInTally;
        }
        if (message.tallyBillDate !== undefined) {
            obj.tallyBillDate = message.tallyBillDate;
        }
        if (message.stockId !== undefined) {
            obj.stockId = Math.round(message.stockId);
        }
        if (message.creditorId !== undefined) {
            obj.creditorId = Math.round(message.creditorId);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrderBookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
        const message = createBaseUpdateOrderBookRequest();
        message.orderNumber = (_a = object.orderNumber) !== null && _a !== void 0 ? _a : undefined;
        message.customerOrderNumber = (_b = object.customerOrderNumber) !== null && _b !== void 0 ? _b : undefined;
        message.customerName = (_c = object.customerName) !== null && _c !== void 0 ? _c : undefined;
        message.customerContact = (_d = object.customerContact) !== null && _d !== void 0 ? _d : undefined;
        message.customerEmail = (_e = object.customerEmail) !== null && _e !== void 0 ? _e : undefined;
        message.customerAddress = (_f = object.customerAddress) !== null && _f !== void 0 ? _f : undefined;
        message.deliveryAddress = (_g = object.deliveryAddress) !== null && _g !== void 0 ? _g : undefined;
        message.deliveryContact = (_h = object.deliveryContact) !== null && _h !== void 0 ? _h : undefined;
        message.deliveryDate = (_j = object.deliveryDate) !== null && _j !== void 0 ? _j : undefined;
        message.productDescription = (_k = object.productDescription) !== null && _k !== void 0 ? _k : undefined;
        message.productType = (_l = object.productType) !== null && _l !== void 0 ? _l : undefined;
        message.specifications = (_m = object.specifications) !== null && _m !== void 0 ? _m : undefined;
        message.quantity = (_o = object.quantity) !== null && _o !== void 0 ? _o : undefined;
        message.unit = (_p = object.unit) !== null && _p !== void 0 ? _p : undefined;
        message.unitPrice = (_q = object.unitPrice) !== null && _q !== void 0 ? _q : undefined;
        message.totalAmount = (_r = object.totalAmount) !== null && _r !== void 0 ? _r : undefined;
        message.status = (_s = object.status) !== null && _s !== void 0 ? _s : undefined;
        message.priority = (_t = object.priority) !== null && _t !== void 0 ? _t : undefined;
        message.expectedCompletionDate = (_u = object.expectedCompletionDate) !== null && _u !== void 0 ? _u : undefined;
        message.actualCompletionDate = (_v = object.actualCompletionDate) !== null && _v !== void 0 ? _v : undefined;
        message.dispatchDate = (_w = object.dispatchDate) !== null && _w !== void 0 ? _w : undefined;
        message.notes = (_x = object.notes) !== null && _x !== void 0 ? _x : undefined;
        message.specialInstructions = (_y = object.specialInstructions) !== null && _y !== void 0 ? _y : undefined;
        message.tallyVoucherNumber = (_z = object.tallyVoucherNumber) !== null && _z !== void 0 ? _z : undefined;
        message.isBilledInTally = (_0 = object.isBilledInTally) !== null && _0 !== void 0 ? _0 : undefined;
        message.tallyBillDate = (_1 = object.tallyBillDate) !== null && _1 !== void 0 ? _1 : undefined;
        message.stockId = (_2 = object.stockId) !== null && _2 !== void 0 ? _2 : undefined;
        message.creditorId = (_3 = object.creditorId) !== null && _3 !== void 0 ? _3 : undefined;
        return message;
    },
};
function createBaseOrderStatusUpdateRequest() {
    return {
        status: 0,
        notes: undefined,
        actualCompletionDate: undefined,
        dispatchDate: undefined,
        deliveryDate: undefined,
    };
}
exports.OrderStatusUpdateRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.notes !== undefined) {
            writer.uint32(18).string(message.notes);
        }
        if (message.actualCompletionDate !== undefined) {
            writer.uint32(26).string(message.actualCompletionDate);
        }
        if (message.dispatchDate !== undefined) {
            writer.uint32(34).string(message.dispatchDate);
        }
        if (message.deliveryDate !== undefined) {
            writer.uint32(42).string(message.deliveryDate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderStatusUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.notes = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.actualCompletionDate = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.dispatchDate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.deliveryDate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? orderStatusFromJSON(object.status) : 0,
            notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
            actualCompletionDate: isSet(object.actualCompletionDate)
                ? globalThis.String(object.actualCompletionDate)
                : undefined,
            dispatchDate: isSet(object.dispatchDate) ? globalThis.String(object.dispatchDate) : undefined,
            deliveryDate: isSet(object.deliveryDate) ? globalThis.String(object.deliveryDate) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = orderStatusToJSON(message.status);
        }
        if (message.notes !== undefined) {
            obj.notes = message.notes;
        }
        if (message.actualCompletionDate !== undefined) {
            obj.actualCompletionDate = message.actualCompletionDate;
        }
        if (message.dispatchDate !== undefined) {
            obj.dispatchDate = message.dispatchDate;
        }
        if (message.deliveryDate !== undefined) {
            obj.deliveryDate = message.deliveryDate;
        }
        return obj;
    },
    create(base) {
        return exports.OrderStatusUpdateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseOrderStatusUpdateRequest();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.notes = (_b = object.notes) !== null && _b !== void 0 ? _b : undefined;
        message.actualCompletionDate = (_c = object.actualCompletionDate) !== null && _c !== void 0 ? _c : undefined;
        message.dispatchDate = (_d = object.dispatchDate) !== null && _d !== void 0 ? _d : undefined;
        message.deliveryDate = (_e = object.deliveryDate) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function createBaseOrderBookSummary() {
    return {
        totalOrders: 0,
        ordersByStatus: {},
        ordersByPriority: {},
        overdueOrders: 0,
        completedOrders: 0,
        pendingOrders: 0,
        totalValue: 0,
    };
}
exports.OrderBookSummary = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.totalOrders !== 0) {
            writer.uint32(8).int32(message.totalOrders);
        }
        Object.entries(message.ordersByStatus).forEach(([key, value]) => {
            exports.OrderBookSummary_OrdersByStatusEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        Object.entries(message.ordersByPriority).forEach(([key, value]) => {
            exports.OrderBookSummary_OrdersByPriorityEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.overdueOrders !== 0) {
            writer.uint32(32).int32(message.overdueOrders);
        }
        if (message.completedOrders !== 0) {
            writer.uint32(40).int32(message.completedOrders);
        }
        if (message.pendingOrders !== 0) {
            writer.uint32(48).int32(message.pendingOrders);
        }
        if (message.totalValue !== 0) {
            writer.uint32(61).float(message.totalValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderBookSummary();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.totalOrders = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.OrderBookSummary_OrdersByStatusEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.ordersByStatus[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.OrderBookSummary_OrdersByPriorityEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.ordersByPriority[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.overdueOrders = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.completedOrders = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.pendingOrders = reader.int32();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.totalValue = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalOrders: isSet(object.totalOrders) ? globalThis.Number(object.totalOrders) : 0,
            ordersByStatus: isObject(object.ordersByStatus)
                ? Object.entries(object.ordersByStatus).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            ordersByPriority: isObject(object.ordersByPriority)
                ? Object.entries(object.ordersByPriority).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            overdueOrders: isSet(object.overdueOrders) ? globalThis.Number(object.overdueOrders) : 0,
            completedOrders: isSet(object.completedOrders) ? globalThis.Number(object.completedOrders) : 0,
            pendingOrders: isSet(object.pendingOrders) ? globalThis.Number(object.pendingOrders) : 0,
            totalValue: isSet(object.totalValue) ? globalThis.Number(object.totalValue) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalOrders !== 0) {
            obj.totalOrders = Math.round(message.totalOrders);
        }
        if (message.ordersByStatus) {
            const entries = Object.entries(message.ordersByStatus);
            if (entries.length > 0) {
                obj.ordersByStatus = {};
                entries.forEach(([k, v]) => {
                    obj.ordersByStatus[k] = Math.round(v);
                });
            }
        }
        if (message.ordersByPriority) {
            const entries = Object.entries(message.ordersByPriority);
            if (entries.length > 0) {
                obj.ordersByPriority = {};
                entries.forEach(([k, v]) => {
                    obj.ordersByPriority[k] = Math.round(v);
                });
            }
        }
        if (message.overdueOrders !== 0) {
            obj.overdueOrders = Math.round(message.overdueOrders);
        }
        if (message.completedOrders !== 0) {
            obj.completedOrders = Math.round(message.completedOrders);
        }
        if (message.pendingOrders !== 0) {
            obj.pendingOrders = Math.round(message.pendingOrders);
        }
        if (message.totalValue !== 0) {
            obj.totalValue = message.totalValue;
        }
        return obj;
    },
    create(base) {
        return exports.OrderBookSummary.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseOrderBookSummary();
        message.totalOrders = (_a = object.totalOrders) !== null && _a !== void 0 ? _a : 0;
        message.ordersByStatus = Object.entries((_b = object.ordersByStatus) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.ordersByPriority = Object.entries((_c = object.ordersByPriority) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.overdueOrders = (_d = object.overdueOrders) !== null && _d !== void 0 ? _d : 0;
        message.completedOrders = (_e = object.completedOrders) !== null && _e !== void 0 ? _e : 0;
        message.pendingOrders = (_f = object.pendingOrders) !== null && _f !== void 0 ? _f : 0;
        message.totalValue = (_g = object.totalValue) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseOrderBookSummary_OrdersByStatusEntry() {
    return { key: "", value: 0 };
}
exports.OrderBookSummary_OrdersByStatusEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderBookSummary_OrdersByStatusEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.OrderBookSummary_OrdersByStatusEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOrderBookSummary_OrdersByStatusEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseOrderBookSummary_OrdersByPriorityEntry() {
    return { key: "", value: 0 };
}
exports.OrderBookSummary_OrdersByPriorityEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderBookSummary_OrdersByPriorityEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.OrderBookSummary_OrdersByPriorityEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOrderBookSummary_OrdersByPriorityEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
